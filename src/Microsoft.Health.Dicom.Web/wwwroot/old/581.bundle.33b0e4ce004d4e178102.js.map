{"version":3,"file":"581.bundle.33b0e4ce004d4e178102.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/_hydrateRT.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/promptHydrateRT.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/utils/initRTToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/OHIFCornerstoneRTViewport.tsx","webpack:///../../../extensions/cornerstone-dicom-rt/src/viewports/_getStatusComponent.tsx"],"sourcesContent":["async function _hydrateRTDisplaySet({\r\n  rtDisplaySet,\r\n  viewportIndex,\r\n  servicesManager,\r\n}) {\r\n  const {\r\n    segmentationService,\r\n    hangingProtocolService,\r\n    viewportGridService,\r\n  } = servicesManager.services;\r\n\r\n  const displaySetInstanceUID = rtDisplaySet.referencedDisplaySetInstanceUID;\r\n\r\n  let segmentationId = null;\r\n\r\n  // We need the hydration to notify panels about the new segmentation added\r\n  const suppressEvents = false;\r\n\r\n  segmentationId = await segmentationService.createSegmentationForRTDisplaySet(\r\n    rtDisplaySet,\r\n    segmentationId,\r\n    suppressEvents\r\n  );\r\n\r\n  segmentationService.hydrateSegmentation(rtDisplaySet.displaySetInstanceUID);\r\n\r\n  const { viewports } = viewportGridService.getState();\r\n\r\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\r\n    viewportIndex,\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n\r\n  // Todo: fix this after we have a better way for stack viewport segmentations\r\n\r\n  // check every viewport in the viewports to see if the displaySetInstanceUID\r\n  // is being displayed, if so we need to update the viewport to use volume viewport\r\n  // (if already is not using it) since Cornerstone3D currently only supports\r\n  // volume viewport for segmentation\r\n  viewports.forEach((viewport, index) => {\r\n    if (index === viewportIndex) {\r\n      return;\r\n    }\r\n\r\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\r\n      viewport.displaySetInstanceUIDs,\r\n      rtDisplaySet.displaySetInstanceUID\r\n    );\r\n\r\n    if (shouldDisplaySeg) {\r\n      updatedViewports.push({\r\n        viewportIndex: index,\r\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\r\n        viewportOptions: {\r\n          initialImageOptions: {\r\n            preset: 'middle',\r\n          },\r\n        },\r\n      });\r\n    }\r\n  });\r\n\r\n  // Do the entire update at once\r\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\r\n  return true;\r\n}\r\n\r\nexport default _hydrateRTDisplaySet;\r\n","import hydrateRTDisplaySet from './_hydrateRT';\r\n\r\nconst RESPONSE = {\r\n  NO_NEVER: -1,\r\n  CANCEL: 0,\r\n  HYDRATE_SEG: 5,\r\n};\r\n\r\nfunction promptHydrateRT({\r\n  servicesManager,\r\n  rtDisplaySet,\r\n  viewportIndex,\r\n  toolGroupId = 'default',\r\n}) {\r\n  const { uiViewportDialogService } = servicesManager.services;\r\n\r\n  return new Promise(async function(resolve, reject) {\r\n    const promptResult = await _askHydrate(\r\n      uiViewportDialogService,\r\n      viewportIndex\r\n    );\r\n\r\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\r\n      const isHydrated = await hydrateRTDisplaySet({\r\n        rtDisplaySet,\r\n        viewportIndex,\r\n        toolGroupId,\r\n        servicesManager,\r\n      });\r\n\r\n      resolve(isHydrated);\r\n    }\r\n  });\r\n}\r\n\r\nfunction _askHydrate(uiViewportDialogService, viewportIndex) {\r\n  return new Promise(function(resolve, reject) {\r\n    const message = 'Do you want to open this Segmentation?';\r\n    const actions = [\r\n      {\r\n        type: 'secondary',\r\n        text: 'No',\r\n        value: RESPONSE.CANCEL,\r\n      },\r\n      {\r\n        type: 'primary',\r\n        text: 'Yes',\r\n        value: RESPONSE.HYDRATE_SEG,\r\n      },\r\n    ];\r\n    const onSubmit = result => {\r\n      uiViewportDialogService.hide();\r\n      resolve(result);\r\n    };\r\n\r\n    uiViewportDialogService.show({\r\n      viewportIndex,\r\n      type: 'info',\r\n      message,\r\n      actions,\r\n      onSubmit,\r\n      onOutsideClick: () => {\r\n        uiViewportDialogService.hide();\r\n        resolve(RESPONSE.CANCEL);\r\n      },\r\n    });\r\n  });\r\n}\r\n\r\nexport default promptHydrateRT;\r\n","function createRTToolGroupAndAddTools(\r\n  ToolGroupService,\r\n  customizationService,\r\n  toolGroupId\r\n) {\r\n  const { tools } =\r\n    customizationService.get('cornerstone.overlayViewportTools') ?? {};\r\n\r\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools, {});\r\n}\r\n\r\nexport default createRTToolGroupAndAddTools;\r\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport OHIF, { utils } from '@ohif/core';\r\nimport {\r\n  ViewportActionBar,\r\n  useViewportGrid,\r\n  LoadingIndicatorTotalPercent,\r\n} from '@ohif/ui';\r\n\r\nimport _hydrateRTdisplaySet from '../utils/_hydrateRT';\r\nimport promptHydrateRT from '../utils/promptHydrateRT';\r\nimport _getStatusComponent from './_getStatusComponent';\r\nimport createRTToolGroupAndAddTools from '../utils/initRTToolGroup';\r\nimport _hydrateRTDisplaySet from '../utils/_hydrateRT';\r\n\r\nconst { formatDate } = utils;\r\nconst RT_TOOLGROUP_BASE_NAME = 'RTToolGroup';\r\n\r\nfunction OHIFCornerstoneRTViewport(props) {\r\n  const {\r\n    children,\r\n    displaySets,\r\n    viewportOptions,\r\n    viewportIndex,\r\n    viewportLabel,\r\n    servicesManager,\r\n    extensionManager,\r\n  } = props;\r\n\r\n  const {\r\n    displaySetService,\r\n    toolGroupService,\r\n    segmentationService,\r\n    uiNotificationService,\r\n    customizationService,\r\n  } = servicesManager.services;\r\n\r\n  const toolGroupId = `${RT_TOOLGROUP_BASE_NAME}-${viewportIndex}`;\r\n\r\n  // RT viewport will always have a single display set\r\n  if (displaySets.length > 1) {\r\n    throw new Error('RT viewport should only have a single display set');\r\n  }\r\n\r\n  const rtDisplaySet = displaySets[0];\r\n\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n\r\n  // States\r\n  const [isToolGroupCreated, setToolGroupCreated] = useState(false);\r\n  const [selectedSegment, setSelectedSegment] = useState(1);\r\n\r\n  // Hydration means that the RT is opened and segments are loaded into the\r\n  // segmentation panel, and RT is also rendered on any viewport that is in the\r\n  // same frameOfReferenceUID as the referencedSeriesUID of the RT. However,\r\n  // loading basically means RT loading over network and bit unpacking of the\r\n  // RT data.\r\n  const [isHydrated, setIsHydrated] = useState(rtDisplaySet.isHydrated);\r\n  const [rtIsLoading, setRtIsLoading] = useState(!rtDisplaySet.isLoaded);\r\n  const [element, setElement] = useState(null);\r\n  const [processingProgress, setProcessingProgress] = useState({\r\n    percentComplete: null,\r\n    totalSegments: null,\r\n  });\r\n\r\n  // refs\r\n  const referencedDisplaySetRef = useRef(null);\r\n\r\n  const { viewports, activeViewportIndex } = viewportGrid;\r\n\r\n  const referencedDisplaySet = rtDisplaySet.getReferenceDisplaySet();\r\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\r\n    referencedDisplaySet\r\n  );\r\n\r\n  referencedDisplaySetRef.current = {\r\n    displaySet: referencedDisplaySet,\r\n    metadata: referencedDisplaySetMetadata,\r\n  };\r\n  /**\r\n   * OnElementEnabled callback which is called after the cornerstoneExtension\r\n   * has enabled the element. Note: we delegate all the image rendering to\r\n   * cornerstoneExtension, so we don't need to do anything here regarding\r\n   * the image rendering, element enabling etc.\r\n   */\r\n  const onElementEnabled = evt => {\r\n    setElement(evt.detail.element);\r\n  };\r\n\r\n  const onElementDisabled = () => {\r\n    setElement(null);\r\n  };\r\n\r\n  const getCornerstoneViewport = useCallback(() => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\r\n    );\r\n\r\n    const {\r\n      displaySet: referencedDisplaySet,\r\n    } = referencedDisplaySetRef.current;\r\n\r\n    // Todo: jump to the center of the first segment\r\n    return (\r\n      <Component\r\n        {...props}\r\n        displaySets={[referencedDisplaySet, rtDisplaySet]}\r\n        viewportOptions={{\r\n          viewportType: 'volume',\r\n          toolGroupId: toolGroupId,\r\n          orientation: viewportOptions.orientation,\r\n          viewportId: viewportOptions.viewportId,\r\n        }}\r\n        onElementEnabled={onElementEnabled}\r\n        onElementDisabled={onElementDisabled}\r\n      ></Component>\r\n    );\r\n  }, [viewportIndex, rtDisplaySet, toolGroupId]);\r\n\r\n  const onSegmentChange = useCallback(\r\n    direction => {\r\n      direction = direction === 'left' ? -1 : 1;\r\n      const segmentationId = rtDisplaySet.displaySetInstanceUID;\r\n      const segmentation = segmentationService.getSegmentation(segmentationId);\r\n\r\n      const { segments } = segmentation;\r\n\r\n      const numberOfSegments = Object.keys(segments).length;\r\n\r\n      let newSelectedSegmentIndex = selectedSegment + direction;\r\n\r\n      // Segment 0 is always background\r\n      if (newSelectedSegmentIndex >= numberOfSegments - 1) {\r\n        newSelectedSegmentIndex = 1;\r\n      } else if (newSelectedSegmentIndex === 0) {\r\n        newSelectedSegmentIndex = numberOfSegments - 1;\r\n      }\r\n\r\n      segmentationService.jumpToSegmentCenter(\r\n        segmentationId,\r\n        newSelectedSegmentIndex,\r\n        toolGroupId\r\n      );\r\n      setSelectedSegment(newSelectedSegmentIndex);\r\n    },\r\n    [selectedSegment]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (rtIsLoading) {\r\n      return;\r\n    }\r\n\r\n    promptHydrateRT({\r\n      servicesManager,\r\n      viewportIndex,\r\n      rtDisplaySet,\r\n    }).then(isHydrated => {\r\n      if (isHydrated) {\r\n        setIsHydrated(true);\r\n      }\r\n    });\r\n  }, [servicesManager, viewportIndex, rtDisplaySet, rtIsLoading]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\r\n      evt => {\r\n        if (\r\n          evt.rtDisplaySet.displaySetInstanceUID ===\r\n          rtDisplaySet.displaySetInstanceUID\r\n        ) {\r\n          setRtIsLoading(false);\r\n        }\r\n\r\n        if (evt.overlappingSegments) {\r\n          uiNotificationService.show({\r\n            title: 'Overlapping Segments',\r\n            message:\r\n              'Overlapping segments detected which is not currently supported',\r\n            type: 'warning',\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [rtDisplaySet]);\r\n\r\n  useEffect(() => {\r\n    const { unsubscribe } = segmentationService.subscribe(\r\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\r\n      ({ percentComplete, numSegments }) => {\r\n        setProcessingProgress({\r\n          percentComplete,\r\n          totalSegments: numSegments,\r\n        });\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [rtDisplaySet]);\r\n\r\n  /**\r\n   Cleanup the SEG viewport when the viewport is destroyed\r\n   */\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\r\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports[activeViewportIndex];\r\n        if (\r\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\r\n        ) {\r\n          viewportGridService.setDisplaySetsForViewport({\r\n            viewportIndex: activeViewportIndex,\r\n            displaySetInstanceUIDs: [],\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\r\n\r\n    if (toolGroup) {\r\n      return;\r\n    }\r\n\r\n    toolGroup = createRTToolGroupAndAddTools(\r\n      toolGroupService,\r\n      customizationService,\r\n      toolGroupId\r\n    );\r\n\r\n    setToolGroupCreated(true);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      segmentationService.removeSegmentationRepresentationFromToolGroup(\r\n        toolGroupId\r\n      );\r\n\r\n      toolGroupService.destroyToolGroup(toolGroupId);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setIsHydrated(rtDisplaySet.isHydrated);\r\n\r\n    return () => {\r\n      // remove the segmentation representations if seg displayset changed\r\n      segmentationService.removeSegmentationRepresentationFromToolGroup(\r\n        toolGroupId\r\n      );\r\n      referencedDisplaySetRef.current = null;\r\n    };\r\n  }, [rtDisplaySet]);\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (\r\n    !referencedDisplaySetRef.current ||\r\n    referencedDisplaySet.displaySetInstanceUID !==\r\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportIndex,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    ManufacturerModelName,\r\n    StudyDate,\r\n    SeriesDescription,\r\n    SpacingBetweenSlices,\r\n    SeriesNumber,\r\n  } = referencedDisplaySetRef.current.metadata;\r\n\r\n  const onStatusClick = async () => {\r\n    const isHydrated = await _hydrateRTDisplaySet({\r\n      rtDisplaySet,\r\n      viewportIndex,\r\n      servicesManager,\r\n    });\r\n\r\n    setIsHydrated(isHydrated);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        onArrowsClick={onSegmentChange}\r\n        getStatusComponent={() => {\r\n          return _getStatusComponent({\r\n            isHydrated,\r\n            onStatusClick,\r\n          });\r\n        }}\r\n        studyData={{\r\n          label: viewportLabel,\r\n          useAltStyling: true,\r\n          studyDate: formatDate(StudyDate),\r\n          currentSeries: SeriesNumber,\r\n          seriesDescription: `RT Viewport ${SeriesDescription}`,\r\n          patientInformation: {\r\n            patientName: PatientName\r\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\r\n              : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        {rtIsLoading && (\r\n          <LoadingIndicatorTotalPercent\r\n            className=\"w-full h-full\"\r\n            totalNumbers={processingProgress.totalSegments}\r\n            percentComplete={processingProgress.percentComplete}\r\n            loadingText=\"Loading RTSTRUCT...\"\r\n          />\r\n        )}\r\n        {getCornerstoneViewport()}\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nOHIFCornerstoneRTViewport.propTypes = {\r\n  displaySets: PropTypes.arrayOf(PropTypes.object),\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nOHIFCornerstoneRTViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet) {\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const referencedDisplaySetMetadata = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\r\n  };\r\n\r\n  return referencedDisplaySetMetadata;\r\n}\r\n\r\nexport default OHIFCornerstoneRTViewport;\r\n","import React from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { Icon, Tooltip } from '@ohif/ui';\r\n\r\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\r\n  let ToolTipMessage = null;\r\n  let StatusIcon = null;\r\n\r\n  const { t } = useTranslation('Common');\r\n  const loadStr = t('LOAD');\r\n\r\n  switch (isHydrated) {\r\n    case true:\r\n      StatusIcon = () => <Icon name=\"status-alert\" />;\r\n\r\n      ToolTipMessage = () => (\r\n        <div>This Segmentation is loaded in the segmentation panel</div>\r\n      );\r\n      break;\r\n    case false:\r\n      StatusIcon = () => <Icon name=\"status-untracked\" />;\r\n\r\n      ToolTipMessage = () => <div>Click LOAD to load RTSTRUCT.</div>;\r\n  }\r\n\r\n  const StatusArea = () => (\r\n    <div className=\"flex h-6 leading-6 cursor-default text-sm text-white\">\r\n      <div className=\"min-w-[45px] flex items-center p-1 rounded-l-xl rounded-r bg-customgray-100\">\r\n        <StatusIcon />\r\n        <span className=\"ml-1\">RTSTRUCT</span>\r\n      </div>\r\n      {!isHydrated && (\r\n        <div\r\n          className=\"ml-1 px-1.5 rounded cursor-pointer hover:text-black bg-primary-main hover:bg-primary-light\"\r\n          // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\r\n          onMouseUp={onStatusClick}\r\n        >\r\n          {loadStr}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      {ToolTipMessage && (\r\n        <Tooltip content={<ToolTipMessage />} position=\"bottom-left\">\r\n          <StatusArea />\r\n        </Tooltip>\r\n      )}\r\n      {!ToolTipMessage && <StatusArea />}\r\n    </>\r\n  );\r\n}\r\n"],"names":["async","_ref","rtDisplaySet","viewportIndex","servicesManager","segmentationService","hangingProtocolService","viewportGridService","services","displaySetInstanceUID","referencedDisplaySetInstanceUID","segmentationId","createSegmentationForRTDisplaySet","hydrateSegmentation","viewports","getState","updatedViewports","getViewportsRequireUpdate","setDisplaySetsForViewports","forEach","viewport","index","shouldRenderSegmentation","displaySetInstanceUIDs","push","viewportOptions","initialImageOptions","preset","RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","toolGroupId","uiViewportDialogService","Promise","resolve","reject","promptResult","message","actions","type","text","value","onSubmit","result","hide","show","onOutsideClick","_askHydrate","hydrateRTDisplaySet","ToolGroupService","customizationService","tools","get","createToolGroupAndAddTools","formatDate","utils","OHIFCornerstoneRTViewport","props","children","displaySets","viewportLabel","extensionManager","displaySetService","toolGroupService","uiNotificationService","length","Error","viewportGrid","useViewportGrid","isToolGroupCreated","setToolGroupCreated","useState","selectedSegment","setSelectedSegment","isHydrated","setIsHydrated","rtIsLoading","setRtIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","activeViewportIndex","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","image0","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","SpacingBetweenSlices","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementEnabled","evt","detail","onElementDisabled","getCornerstoneViewport","useCallback","component","Component","getModuleEntry","React","_extends","viewportType","orientation","viewportId","onSegmentChange","direction","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateRT","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","overlappingSegments","title","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","_ref2","activeViewport","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createRTToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","childrenWithProps","map","child","key","onStatusClick","_hydrateRTDisplaySet","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","ToolTipMessage","StatusIcon","t","useTranslation","loadStr","Icon","name","StatusArea","className","onMouseUp","Tooltip","content","position","_getStatusComponent","studyData","label","useAltStyling","studyDate","currentSeries","seriesDescription","patientInformation","patientName","OHIF","Alphabetic","patientSex","patientAge","MRN","thickness","toFixed","spacing","undefined","scanner","LoadingIndicatorTotalPercent","totalNumbers","loadingText","propTypes","PropTypes","dataSource","customProps","defaultProps"],"sourceRoot":""}