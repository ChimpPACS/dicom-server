{"version":3,"file":"619.bundle.b7cddacd646a8f1de1e6.js","mappings":"iHAAA,MAiQA,EAjQ8B,CAC1B,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,C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","sources":["webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/constants/COLOR_LUT.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/drawingSvg/drawRect.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/enums/SegmentationRepresentations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/activeSegmentation.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/config/segmentationColor.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentLocking.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Contour/contourConfig.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/SegmentationStateManager.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/helpers/normalizeSegmentationInput.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/segmentationState.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/stateManagement/segmentation/triggerSegmentationEvents.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/store/ToolGroupManager/getToolGroup.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/annotation/RectangleROITool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/displayTools/Labelmap/labelmapConfig.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/eraseCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/BrushTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIStartEndThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/RectangleROIThresholdTool.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillCircle.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/tools/segmentation/strategies/fillSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/extend2DBoundingBoxInViewAxis.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/boundingBox/getBoundingBoxAroundShape.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/rectangle/distanceToPoint.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/planar/getWorldWidthAndHeightFromCorners.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/pointInSurroundingSphereCallback.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/math/sphere/pointInSphere.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/createMergedLabelmapForIndex.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/rectangleROIThresholdVolumeByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/thresholdVolumeByRange.js","webpack:///../../../node_modules/@cornerstonejs/tools/dist/esm/utilities/segmentation/utilities.js"],"sourcesContent":["const CORNERSTONE_COLOR_LUT = [\n    [0, 0, 0, 0],\n    [221, 84, 84, 255],\n    [77, 228, 121, 255],\n    [166, 70, 235, 255],\n    [189, 180, 116, 255],\n    [109, 182, 196, 255],\n    [204, 101, 157, 255],\n    [123, 211, 94, 255],\n    [93, 87, 218, 255],\n    [225, 128, 80, 255],\n    [73, 232, 172, 255],\n    [181, 119, 186, 255],\n    [176, 193, 112, 255],\n    [105, 153, 200, 255],\n    [208, 97, 120, 255],\n    [90, 215, 101, 255],\n    [135, 83, 222, 255],\n    [229, 178, 76, 255],\n    [122, 183, 181, 255],\n    [190, 115, 171, 255],\n    [149, 197, 108, 255],\n    [100, 118, 205, 255],\n    [212, 108, 93, 255],\n    [86, 219, 141, 255],\n    [183, 79, 226, 255],\n    [233, 233, 72, 255],\n    [118, 167, 187, 255],\n    [194, 111, 146, 255],\n    [116, 201, 104, 255],\n    [115, 96, 209, 255],\n    [216, 147, 89, 255],\n    [82, 223, 188, 255],\n    [230, 75, 224, 255],\n    [163, 184, 121, 255],\n    [114, 143, 191, 255],\n    [198, 107, 114, 255],\n    [99, 206, 122, 255],\n    [153, 92, 213, 255],\n    [220, 192, 85, 255],\n    [78, 215, 227, 255],\n    [234, 71, 173, 255],\n    [141, 188, 117, 255],\n    [110, 113, 195, 255],\n    [202, 128, 103, 255],\n    [95, 210, 157, 255],\n    [195, 88, 217, 255],\n    [206, 224, 81, 255],\n    [74, 166, 231, 255],\n    [185, 120, 139, 255],\n    [113, 192, 113, 255],\n    [133, 106, 199, 255],\n    [207, 162, 98, 255],\n    [91, 214, 198, 255],\n    [221, 84, 198, 255],\n    [159, 228, 77, 255],\n    [70, 111, 235, 255],\n    [189, 119, 116, 255],\n    [109, 196, 138, 255],\n    [165, 101, 204, 255],\n    [211, 201, 94, 255],\n    [87, 191, 218, 255],\n    [225, 80, 153, 255],\n    [106, 232, 73, 255],\n    [124, 119, 186, 255],\n    [193, 142, 112, 255],\n    [105, 200, 168, 255],\n    [203, 97, 208, 255],\n    [184, 215, 90, 255],\n    [83, 147, 222, 255],\n    [229, 76, 101, 255],\n    [122, 183, 130, 255],\n    [146, 115, 190, 255],\n    [197, 171, 108, 255],\n    [100, 205, 205, 255],\n    [212, 93, 177, 255],\n    [141, 219, 86, 255],\n    [79, 97, 226, 255],\n    [233, 99, 72, 255],\n    [118, 187, 150, 255],\n    [173, 111, 194, 255],\n    [197, 201, 104, 255],\n    [96, 171, 209, 255],\n    [216, 89, 137, 255],\n    [94, 223, 82, 255],\n    [107, 75, 230, 255],\n    [184, 153, 121, 255],\n    [114, 191, 175, 255],\n    [198, 107, 191, 255],\n    [166, 206, 99, 255],\n    [92, 132, 213, 255],\n    [220, 85, 91, 255],\n    [78, 227, 115, 255],\n    [159, 71, 234, 255],\n    [188, 176, 117, 255],\n    [110, 185, 195, 255],\n    [202, 103, 161, 255],\n    [129, 210, 95, 255],\n    [88, 88, 217, 255],\n    [224, 123, 81, 255],\n    [74, 231, 166, 255],\n    [177, 120, 185, 255],\n    [179, 192, 113, 255],\n    [106, 156, 199, 255],\n    [207, 98, 125, 255],\n    [91, 214, 96, 255],\n    [130, 84, 221, 255],\n    [228, 171, 77, 255],\n    [70, 235, 221, 255],\n    [189, 116, 174, 255],\n    [153, 196, 109, 255],\n    [101, 123, 204, 255],\n    [211, 104, 94, 255],\n    [87, 218, 136, 255],\n    [177, 80, 225, 255],\n    [232, 225, 73, 255],\n    [119, 169, 186, 255],\n    [193, 112, 149, 255],\n    [121, 200, 105, 255],\n    [111, 97, 208, 255],\n    [215, 142, 90, 255],\n    [83, 222, 181, 255],\n    [229, 76, 229, 255],\n    [165, 183, 122, 255],\n    [115, 146, 190, 255],\n    [197, 108, 119, 255],\n    [100, 205, 118, 255],\n    [148, 93, 212, 255],\n    [219, 186, 86, 255],\n    [79, 220, 226, 255],\n    [233, 72, 179, 255],\n    [144, 187, 118, 255],\n    [111, 118, 194, 255],\n    [201, 124, 104, 255],\n    [96, 209, 153, 255],\n    [189, 89, 216, 255],\n    [211, 223, 82, 255],\n    [75, 172, 230, 255],\n    [184, 121, 142, 255],\n    [117, 191, 114, 255],\n    [130, 107, 198, 255],\n    [206, 157, 99, 255],\n    [92, 213, 193, 255],\n    [220, 85, 203, 255],\n    [165, 227, 78, 255],\n    [71, 118, 234, 255],\n    [188, 117, 117, 255],\n    [110, 195, 135, 255],\n    [161, 103, 202, 255],\n    [210, 195, 95, 255],\n    [88, 195, 217, 255],\n    [224, 81, 158, 255],\n    [113, 231, 74, 255],\n    [123, 120, 185, 255],\n    [192, 139, 113, 255],\n    [106, 199, 164, 255],\n    [198, 98, 207, 255],\n    [188, 214, 91, 255],\n    [84, 153, 221, 255],\n    [228, 77, 108, 255],\n    [70, 235, 84, 255],\n    [143, 116, 189, 255],\n    [196, 167, 109, 255],\n    [101, 204, 199, 255],\n    [211, 94, 182, 255],\n    [147, 218, 87, 255],\n    [80, 104, 225, 255],\n    [232, 93, 73, 255],\n    [119, 186, 147, 255],\n    [170, 112, 193, 255],\n    [200, 200, 105, 255],\n    [97, 175, 208, 255],\n    [215, 90, 142, 255],\n    [100, 222, 83, 255],\n    [101, 76, 229, 255],\n    [183, 150, 122, 255],\n    [115, 190, 171, 255],\n    [197, 108, 194, 255],\n    [170, 205, 100, 255],\n    [93, 138, 212, 255],\n    [219, 86, 97, 255],\n    [79, 226, 110, 255],\n    [153, 72, 233, 255],\n    [187, 173, 118, 255],\n    [111, 187, 194, 255],\n    [201, 104, 165, 255],\n    [134, 209, 96, 255],\n    [89, 95, 216, 255],\n    [223, 117, 82, 255],\n    [75, 230, 159, 255],\n    [174, 121, 184, 255],\n    [182, 191, 114, 255],\n    [107, 160, 198, 255],\n    [206, 99, 130, 255],\n    [92, 213, 92, 255],\n    [124, 85, 220, 255],\n    [227, 165, 78, 255],\n    [71, 234, 214, 255],\n    [188, 117, 176, 255],\n    [156, 195, 110, 255],\n    [103, 128, 202, 255],\n    [210, 100, 95, 255],\n    [88, 217, 131, 255],\n    [170, 81, 224, 255],\n    [231, 218, 74, 255],\n    [120, 172, 185, 255],\n    [192, 113, 153, 255],\n    [125, 199, 106, 255],\n    [107, 98, 207, 255],\n    [214, 137, 91, 255],\n    [84, 221, 175, 255],\n    [222, 77, 228, 255],\n    [194, 235, 70, 255],\n    [116, 149, 189, 255],\n    [196, 109, 123, 255],\n    [101, 204, 114, 255],\n    [143, 94, 211, 255],\n    [218, 180, 87, 255],\n    [80, 225, 225, 255],\n    [232, 73, 186, 255],\n    [147, 186, 119, 255],\n    [112, 122, 193, 255],\n    [200, 121, 105, 255],\n    [97, 208, 148, 255],\n    [184, 90, 215, 255],\n    [216, 222, 83, 255],\n    [76, 178, 229, 255],\n    [183, 122, 145, 255],\n    [121, 190, 115, 255],\n    [126, 108, 197, 255],\n    [205, 153, 100, 255],\n    [93, 212, 187, 255],\n    [219, 86, 208, 255],\n    [171, 226, 79, 255],\n    [72, 126, 233, 255],\n    [187, 118, 121, 255],\n    [111, 194, 132, 255],\n    [157, 104, 201, 255],\n    [209, 190, 96, 255],\n    [89, 200, 216, 255],\n    [223, 82, 164, 255],\n    [120, 230, 75, 255],\n    [121, 121, 184, 255],\n    [191, 136, 114, 255],\n    [107, 198, 160, 255],\n    [192, 99, 206, 255],\n    [193, 213, 92, 255],\n    [85, 158, 220, 255],\n    [227, 78, 115, 255],\n    [71, 234, 78, 255],\n    [141, 117, 188, 255],\n    [195, 163, 110, 255],\n    [103, 202, 194, 255],\n    [210, 95, 186, 255],\n    [153, 217, 88, 255],\n    [81, 111, 224, 255],\n];\nexport default CORNERSTONE_COLOR_LUT;\n//# sourceMappingURL=COLOR_LUT.js.map","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './_setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './_setNewAttributesIfValid';\nexport default function drawRect(svgDrawingHelper, annotationUID, rectangleUID, start, end, options = {}, dataId = '') {\n    const { color, width: _width, lineWidth, lineDash, } = Object.assign({\n        color: 'dodgerblue',\n        width: '2',\n        lineWidth: undefined,\n        lineDash: undefined,\n    }, options);\n    const strokeWidth = lineWidth || _width;\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n    const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n    const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n    const width = Math.abs(start[0] - end[0]);\n    const height = Math.abs(start[1] - end[1]);\n    const attributes = {\n        x: `${tlhc[0]}`,\n        y: `${tlhc[1]}`,\n        width: `${width}`,\n        height: `${height}`,\n        stroke: color,\n        fill: 'transparent',\n        'stroke-width': strokeWidth,\n        'stroke-dasharray': lineDash,\n    };\n    if (existingRect) {\n        _setAttributesIfNecessary(attributes, existingRect);\n        svgDrawingHelper.setNodeTouched(svgNodeHash);\n    }\n    else {\n        const svgRectElement = document.createElementNS(svgns, 'rect');\n        if (dataId !== '') {\n            svgRectElement.setAttribute('data-id', dataId);\n        }\n        _setNewAttributesIfValid(attributes, svgRectElement);\n        svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n    }\n}\n//# sourceMappingURL=drawRect.js.map","var SegmentationRepresentations;\n(function (SegmentationRepresentations) {\n    SegmentationRepresentations[\"Labelmap\"] = \"LABELMAP\";\n    SegmentationRepresentations[\"Contour\"] = \"CONTOUR\";\n})(SegmentationRepresentations || (SegmentationRepresentations = {}));\nexport default SegmentationRepresentations;\n//# sourceMappingURL=SegmentationRepresentations.js.map","import { getDefaultSegmentationStateManager } from './segmentationState';\nimport { triggerSegmentationRepresentationModified } from './triggerSegmentationEvents';\nfunction getActiveSegmentationRepresentation(toolGroupId) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    const toolGroupSegmentationRepresentations = segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n    if (!toolGroupSegmentationRepresentations) {\n        return;\n    }\n    const activeRepresentation = toolGroupSegmentationRepresentations.find((representation) => representation.active);\n    return activeRepresentation;\n}\nfunction setActiveSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.setActiveSegmentationRepresentation(toolGroupId, segmentationRepresentationUID);\n    triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID);\n}\nexport { getActiveSegmentationRepresentation, setActiveSegmentationRepresentation, };\n//# sourceMappingURL=activeSegmentation.js.map","import { utilities } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nfunction addColorLUT(colorLUT, colorLUTIndex) {\n    if (!colorLUT) {\n        throw new Error('addColorLUT: colorLUT is required');\n    }\n    if (!utilities.isEqual(colorLUT[0], [0, 0, 0, 0])) {\n        console.warn('addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it');\n        colorLUT.unshift([0, 0, 0, 0]);\n    }\n    SegmentationState.addColorLUT(colorLUT, colorLUTIndex);\n}\nfunction setColorLUT(toolGroupId, segmentationRepresentationUID, colorLUTIndex) {\n    const segRepresentation = SegmentationState.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n    if (!segRepresentation) {\n        throw new Error(`setColorLUT: could not find segmentation representation with UID ${segmentationRepresentationUID}`);\n    }\n    if (!SegmentationState.getColorLUT(colorLUTIndex)) {\n        throw new Error(`setColorLUT: could not find colorLUT with index ${colorLUTIndex}`);\n    }\n    segRepresentation.colorLUTIndex = colorLUTIndex;\n    triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID);\n}\nfunction getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex) {\n    const segmentationRepresentation = SegmentationState.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n    if (!segmentationRepresentation) {\n        throw new Error(`segmentation representation with UID ${segmentationRepresentationUID} does not exist for tool group ${toolGroupId}`);\n    }\n    const { colorLUTIndex } = segmentationRepresentation;\n    const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n    return colorLUT[segmentIndex];\n}\nfunction setColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex, color) {\n    const colorReference = getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);\n    for (let i = 0; i < color.length; i++) {\n        colorReference[i] = color[i];\n    }\n    triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID);\n}\nexport { getColorForSegmentIndex, addColorLUT, setColorLUT, setColorForSegmentIndex, };\n//# sourceMappingURL=segmentationColor.js.map","import { getSegmentation } from './segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction setActiveSegmentIndex(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation?.activeSegmentIndex !== segmentIndex) {\n        segmentation.activeSegmentIndex = segmentIndex;\n        triggerSegmentationModified(segmentationId);\n    }\n}\nfunction getActiveSegmentIndex(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (segmentation) {\n        return segmentation.activeSegmentIndex;\n    }\n}\nexport { getActiveSegmentIndex, setActiveSegmentIndex };\n//# sourceMappingURL=segmentIndex.js.map","import { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\nfunction isSegmentIndexLocked(segmentationId, segmentIndex) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segmentsLocked } = segmentation;\n    return segmentsLocked.has(segmentIndex);\n}\nfunction setSegmentIndexLocked(segmentationId, segmentIndex, locked = true) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segmentsLocked } = segmentation;\n    if (locked) {\n        segmentsLocked.add(segmentIndex);\n    }\n    else {\n        segmentsLocked.delete(segmentIndex);\n    }\n    triggerSegmentationModified(segmentationId);\n}\nfunction getLockedSegments(segmentationId) {\n    const segmentation = getSegmentation(segmentationId);\n    if (!segmentation) {\n        throw new Error(`No segmentation state found for ${segmentationId}`);\n    }\n    const { segmentsLocked } = segmentation;\n    return Array.from(segmentsLocked);\n}\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegments };\n//# sourceMappingURL=segmentLocking.js.map","const defaultContourConfig = {\n    renderOutline: true,\n    outlineWidthActive: 2,\n    outlineWidthInactive: 2,\n    outlineOpacity: 1,\n    outlineOpacityInactive: 0.85,\n    renderFill: true,\n    fillAlpha: 1,\n    fillAlphaInactive: 0,\n};\nfunction getDefaultContourConfig() {\n    return defaultContourConfig;\n}\nexport default getDefaultContourConfig;\n//# sourceMappingURL=contourConfig.js.map","import { utilities as csUtils } from '@cornerstonejs/core';\nimport cloneDeep from 'lodash.clonedeep';\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\nimport { SegmentationRepresentations } from '../../enums';\nimport getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nconst defaultLabelmapConfig = getDefaultLabelmapConfig();\nconst defaultContourConfig = getDefaultContourConfig();\nconst newGlobalConfig = {\n    renderInactiveSegmentations: true,\n    representations: {\n        [SegmentationRepresentations.Labelmap]: defaultLabelmapConfig,\n        [SegmentationRepresentations.Contour]: defaultContourConfig,\n    },\n};\nconst initialDefaultState = {\n    colorLUT: [],\n    segmentations: [],\n    globalConfig: newGlobalConfig,\n    toolGroups: {},\n};\nexport default class SegmentationStateManager {\n    constructor(uid) {\n        if (!uid) {\n            uid = csUtils.uuidv4();\n        }\n        this.state = cloneDeep(initialDefaultState);\n        this.uid = uid;\n    }\n    getState() {\n        return this.state;\n    }\n    getToolGroups() {\n        return Object.keys(this.state.toolGroups);\n    }\n    getColorLUT(lutIndex) {\n        return this.state.colorLUT[lutIndex];\n    }\n    resetState() {\n        this.state = cloneDeep(initialDefaultState);\n    }\n    getSegmentation(segmentationId) {\n        return this.state.segmentations.find((segmentation) => segmentation.segmentationId === segmentationId);\n    }\n    addSegmentation(segmentation) {\n        this._initDefaultColorLUTIfNecessary();\n        if (this.getSegmentation(segmentation.segmentationId)) {\n            throw new Error(`Segmentation with id ${segmentation.segmentationId} already exists`);\n        }\n        this.state.segmentations.push(segmentation);\n    }\n    getSegmentationRepresentations(toolGroupId) {\n        const toolGroupSegRepresentationsWithConfig = this.state.toolGroups[toolGroupId];\n        if (!toolGroupSegRepresentationsWithConfig) {\n            return;\n        }\n        return toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n    }\n    addSegmentationRepresentation(toolGroupId, segmentationRepresentation) {\n        if (!this.state.toolGroups[toolGroupId]) {\n            this.state.toolGroups[toolGroupId] = {\n                segmentationRepresentations: [],\n                config: {},\n            };\n        }\n        this.state.toolGroups[toolGroupId].segmentationRepresentations.push(segmentationRepresentation);\n        this._handleActiveSegmentation(toolGroupId, segmentationRepresentation);\n    }\n    getGlobalConfig() {\n        return this.state.globalConfig;\n    }\n    setGlobalConfig(config) {\n        this.state.globalConfig = config;\n    }\n    getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID) {\n        const toolGroupSegRepresentations = this.getSegmentationRepresentations(toolGroupId);\n        const segmentationData = toolGroupSegRepresentations.find((representation) => representation.segmentationRepresentationUID ===\n            segmentationRepresentationUID);\n        return segmentationData;\n    }\n    removeSegmentation(segmentationId) {\n        this.state.segmentations = this.state.segmentations.filter((segmentation) => segmentation.segmentationId !== segmentationId);\n    }\n    removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {\n        const toolGroupSegmentationRepresentations = this.getSegmentationRepresentations(toolGroupId);\n        if (!toolGroupSegmentationRepresentations ||\n            !toolGroupSegmentationRepresentations.length) {\n            throw new Error(`No viewport specific segmentation state found for viewport ${toolGroupId}`);\n        }\n        const state = toolGroupSegmentationRepresentations;\n        const index = state.findIndex((segData) => segData.segmentationRepresentationUID === segmentationRepresentationUID);\n        if (index === -1) {\n            console.warn(`No viewport specific segmentation state data found for viewport ${toolGroupId} and segmentation data UID ${segmentationRepresentationUID}`);\n        }\n        const removedSegmentationRepresentation = toolGroupSegmentationRepresentations[index];\n        toolGroupSegmentationRepresentations.splice(index, 1);\n        this._handleActiveSegmentation(toolGroupId, removedSegmentationRepresentation);\n    }\n    setActiveSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {\n        const toolGroupSegmentations = this.getSegmentationRepresentations(toolGroupId);\n        if (!toolGroupSegmentations || !toolGroupSegmentations.length) {\n            throw new Error(`No segmentation data found for toolGroupId: ${toolGroupId}`);\n        }\n        const segmentationData = toolGroupSegmentations.find((segmentationData) => segmentationData.segmentationRepresentationUID ===\n            segmentationRepresentationUID);\n        if (!segmentationData) {\n            throw new Error(`No segmentation data found for segmentation data UID ${segmentationRepresentationUID}`);\n        }\n        segmentationData.active = true;\n        this._handleActiveSegmentation(toolGroupId, segmentationData);\n    }\n    getToolGroupSpecificConfig(toolGroupId) {\n        const toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n        if (!toolGroupStateWithConfig) {\n            return;\n        }\n        return toolGroupStateWithConfig.config;\n    }\n    getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID) {\n        const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n        if (!segmentationRepresentation) {\n            return;\n        }\n        return segmentationRepresentation.segmentationRepresentationSpecificConfig;\n    }\n    setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config) {\n        const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n        if (!segmentationRepresentation) {\n            return;\n        }\n        segmentationRepresentation.segmentationRepresentationSpecificConfig =\n            config;\n    }\n    getSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, segmentIndex) {\n        const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n        if (!segmentationRepresentation) {\n            return;\n        }\n        return segmentationRepresentation.segmentSpecificConfig[segmentIndex];\n    }\n    setSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, config) {\n        const segmentationRepresentation = this.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n        if (!segmentationRepresentation) {\n            return;\n        }\n        segmentationRepresentation.segmentSpecificConfig = config;\n    }\n    setSegmentationRepresentationConfig(toolGroupId, config) {\n        let toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n        if (!toolGroupStateWithConfig) {\n            this.state.toolGroups[toolGroupId] = {\n                segmentationRepresentations: [],\n                config: {\n                    renderInactiveSegmentations: true,\n                    representations: {},\n                },\n            };\n            toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n        }\n        toolGroupStateWithConfig.config = {\n            ...toolGroupStateWithConfig.config,\n            ...config,\n        };\n    }\n    addColorLUT(colorLUT, lutIndex) {\n        if (this.state.colorLUT[lutIndex]) {\n            console.log('Color LUT table already exists, overwriting');\n        }\n        this.state.colorLUT[lutIndex] = colorLUT;\n    }\n    removeColorLUT(colorLUTIndex) {\n        delete this.state.colorLUT[colorLUTIndex];\n    }\n    _handleActiveSegmentation(toolGroupId, recentlyAddedOrRemovedSegmentationRepresentation) {\n        const segmentationRepresentations = this.getSegmentationRepresentations(toolGroupId);\n        if (segmentationRepresentations.length === 0) {\n            return;\n        }\n        if (segmentationRepresentations.length === 1) {\n            segmentationRepresentations[0].active = true;\n            return;\n        }\n        const activeSegmentationRepresentations = segmentationRepresentations.filter((representation) => representation.active);\n        if (activeSegmentationRepresentations.length === 0) {\n            segmentationRepresentations[0].active = true;\n            return;\n        }\n        if (recentlyAddedOrRemovedSegmentationRepresentation.active) {\n            segmentationRepresentations.forEach((representation) => {\n                if (representation.segmentationRepresentationUID !==\n                    recentlyAddedOrRemovedSegmentationRepresentation.segmentationRepresentationUID) {\n                    representation.active = false;\n                }\n            });\n        }\n    }\n    _initDefaultColorLUTIfNecessary() {\n        if (this.state.colorLUT.length === 0 || !this.state.colorLUT[0]) {\n            this.addColorLUT(CORNERSTONE_COLOR_LUT, 0);\n        }\n    }\n}\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { defaultSegmentationStateManager };\n//# sourceMappingURL=SegmentationStateManager.js.map","function normalizeSegmentationInput(segmentationInput) {\n    const { segmentationId, representation } = segmentationInput;\n    return {\n        segmentationId,\n        cachedStats: {},\n        segmentLabels: {},\n        label: null,\n        segmentsLocked: new Set(),\n        type: representation.type,\n        activeSegmentIndex: 1,\n        representationData: {\n            [representation.type]: {\n                ...representation.data,\n            },\n        },\n    };\n}\nexport default normalizeSegmentationInput;\n//# sourceMappingURL=normalizeSegmentationInput.js.map","import { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport { triggerSegmentationModified, triggerSegmentationRemoved, triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, } from './triggerSegmentationEvents';\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\nfunction getDefaultSegmentationStateManager() {\n    return defaultSegmentationStateManager;\n}\nfunction getSegmentation(segmentationId) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    return segmentationStateManager.getSegmentation(segmentationId);\n}\nfunction getSegmentations() {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    const state = segmentationStateManager.getState();\n    return state.segmentations;\n}\nfunction addSegmentation(segmentationInput, suppressEvents) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    const segmentation = normalizeSegmentationInput(segmentationInput);\n    segmentationStateManager.addSegmentation(segmentation);\n    if (!suppressEvents) {\n        triggerSegmentationModified(segmentation.segmentationId);\n    }\n}\nfunction getSegmentationRepresentations(toolGroupId) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    return segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n}\nfunction getToolGroupIdsWithSegmentation(segmentationId) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    const state = segmentationStateManager.getState();\n    const toolGroupIds = Object.keys(state.toolGroups);\n    const foundToolGroupIds = [];\n    toolGroupIds.forEach((toolGroupId) => {\n        const toolGroupSegmentationRepresentations = segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n        toolGroupSegmentationRepresentations.forEach((representation) => {\n            if (representation.segmentationId === segmentationId) {\n                foundToolGroupIds.push(toolGroupId);\n            }\n        });\n    });\n    return foundToolGroupIds;\n}\nfunction getToolGroupSpecificConfig(toolGroupId) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    return segmentationStateManager.getToolGroupSpecificConfig(toolGroupId);\n}\nfunction setToolGroupSpecificConfig(toolGroupId, config, suppressEvents) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.setSegmentationRepresentationConfig(toolGroupId, config);\n    if (!suppressEvents) {\n        triggerSegmentationRepresentationModified(toolGroupId);\n    }\n}\nfunction setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config, suppressEvents = false) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.setSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID, config);\n    if (!suppressEvents) {\n        triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID);\n    }\n}\nfunction getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    return segmentationStateManager.getSegmentationRepresentationSpecificConfig(toolGroupId, segmentationRepresentationUID);\n}\nfunction getSegmentSpecificRepresentationConfig(toolGroupId, segmentationRepresentationUID, segmentIndex) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    return segmentationStateManager.getSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, segmentIndex);\n}\nfunction setSegmentSpecificRepresentationConfig(toolGroupId, segmentationRepresentationUID, config, suppressEvents = false) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.setSegmentSpecificConfig(toolGroupId, segmentationRepresentationUID, config);\n    if (!suppressEvents) {\n        triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID);\n    }\n}\nfunction addSegmentationRepresentation(toolGroupId, segmentationRepresentation, suppressEvents) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.addSegmentationRepresentation(toolGroupId, segmentationRepresentation);\n    if (!suppressEvents) {\n        triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentation.segmentationRepresentationUID);\n    }\n}\nfunction getGlobalConfig() {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    return segmentationStateManager.getGlobalConfig();\n}\nfunction setGlobalConfig(config, suppressEvents) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.setGlobalConfig(config);\n    if (!suppressEvents) {\n        triggerSegmentationModified();\n    }\n}\nfunction getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    return segmentationStateManager.getSegmentationRepresentationByUID(toolGroupId, segmentationRepresentationUID);\n}\nfunction removeSegmentation(segmentationId) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.removeSegmentation(segmentationId);\n    triggerSegmentationRemoved(segmentationId);\n}\nfunction removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.removeSegmentationRepresentation(toolGroupId, segmentationRepresentationUID);\n    triggerSegmentationRepresentationRemoved(toolGroupId, segmentationRepresentationUID);\n}\nfunction removeColorLUT(colorLUTIndex) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\nfunction getColorLUT(index) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    return segmentationStateManager.getColorLUT(index);\n}\nfunction addColorLUT(colorLUT, index) {\n    const segmentationStateManager = getDefaultSegmentationStateManager();\n    segmentationStateManager.addColorLUT(colorLUT, index);\n}\nexport { getDefaultSegmentationStateManager, getSegmentation, getSegmentations, addSegmentation, removeSegmentation, getSegmentationRepresentations, addSegmentationRepresentation, removeSegmentationRepresentation, getToolGroupSpecificConfig, setToolGroupSpecificConfig, getGlobalConfig, setGlobalConfig, getSegmentationRepresentationSpecificConfig, setSegmentationRepresentationSpecificConfig, getSegmentSpecificRepresentationConfig, setSegmentSpecificRepresentationConfig, getToolGroupIdsWithSegmentation, getSegmentationRepresentationByUID, addColorLUT, getColorLUT, removeColorLUT, };\n//# sourceMappingURL=segmentationState.js.map","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { getSegmentationRepresentations, getSegmentations, } from '../../stateManagement/segmentation/segmentationState';\nfunction triggerSegmentationRemoved(segmentationId) {\n    const eventDetail = {\n        segmentationId,\n    };\n    triggerEvent(eventTarget, Events.SEGMENTATION_REMOVED, eventDetail);\n}\nfunction triggerSegmentationRepresentationRemoved(toolGroupId, segmentationRepresentationUID) {\n    const eventDetail = {\n        toolGroupId,\n        segmentationRepresentationUID,\n    };\n    triggerEvent(eventTarget, Events.SEGMENTATION_REPRESENTATION_REMOVED, eventDetail);\n}\nfunction triggerSegmentationRepresentationModified(toolGroupId, segmentationRepresentationUID) {\n    const eventDetail = {\n        toolGroupId,\n        segmentationRepresentationUID,\n    };\n    if (segmentationRepresentationUID) {\n        triggerEvent(eventTarget, Events.SEGMENTATION_REPRESENTATION_MODIFIED, eventDetail);\n        return;\n    }\n    const segmentationRepresentations = getSegmentationRepresentations(toolGroupId) || [];\n    segmentationRepresentations.forEach((segmentationRepresentation) => {\n        const { segmentationRepresentationUID } = segmentationRepresentation;\n        const eventDetail = {\n            toolGroupId,\n            segmentationRepresentationUID,\n        };\n        triggerEvent(eventTarget, Events.SEGMENTATION_REPRESENTATION_MODIFIED, eventDetail);\n    });\n}\nfunction triggerSegmentationModified(segmentationId) {\n    let segmentationIds;\n    if (segmentationId) {\n        segmentationIds = [segmentationId];\n    }\n    else {\n        segmentationIds = getSegmentations().map(({ segmentationId }) => segmentationId);\n    }\n    segmentationIds.forEach((segmentationId) => {\n        const eventDetail = {\n            segmentationId,\n        };\n        triggerEvent(eventTarget, Events.SEGMENTATION_MODIFIED, eventDetail);\n    });\n}\nfunction triggerSegmentationDataModified(segmentationId, modifiedSlicesToUse) {\n    const eventDetail = {\n        segmentationId,\n        modifiedSlicesToUse,\n    };\n    triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\nexport { triggerSegmentationRepresentationModified, triggerSegmentationRepresentationRemoved, triggerSegmentationDataModified, triggerSegmentationModified, triggerSegmentationRemoved, };\n//# sourceMappingURL=triggerSegmentationEvents.js.map","import { state } from '../index';\nfunction getToolGroup(toolGroupId) {\n    return state.toolGroups.find((s) => s.id === toolGroupId);\n}\nexport default getToolGroup;\n//# sourceMappingURL=getToolGroup.js.map","import { AnnotationTool } from '../base';\nimport { getEnabledElement, VolumeViewport, triggerEvent, eventTarget, utilities as csUtils, } from '@cornerstonejs/core';\nimport throttle from '../../utilities/throttle';\nimport { addAnnotation, getAnnotations, removeAnnotation, } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { drawHandles as drawHandlesSvg, drawLinkedTextBox as drawLinkedTextBoxSvg, drawRect as drawRectSvg, } from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { getModalityUnit } from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROITool extends AnnotationTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const referencedImageId = this.getReferencedImageId(viewport, worldPos, viewPlaneNormal, viewUp);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                invalidated: true,\n                highlighted: true,\n                metadata: {\n                    toolName: this.getToolName(),\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: [0, 0, 0],\n                            worldBoundingBox: {\n                                topLeft: [0, 0, 0],\n                                topRight: [0, 0, 0],\n                                bottomLeft: [0, 0, 0],\n                                bottomRight: [0, 0, 0],\n                            },\n                        },\n                        activeHandleIndex: null,\n                    },\n                    cachedStats: {},\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                movingTextBox: false,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n            return annotation;\n        };\n        this.isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            const { data } = annotation;\n            const { points } = data.handles;\n            const canvasPoint1 = viewport.worldToCanvas(points[0]);\n            const canvasPoint2 = viewport.worldToCanvas(points[3]);\n            const rect = this._getRectangleImageCoordinates([\n                canvasPoint1,\n                canvasPoint2,\n            ]);\n            const point = [canvasCoords[0], canvasCoords[1]];\n            const { left, top, width, height } = rect;\n            const distanceToPoint = rectangle.distanceToPoint([left, top, width, height], point);\n            if (distanceToPoint <= proximity) {\n                return true;\n            }\n            return false;\n        };\n        this.toolSelectedCallback = (evt, annotation) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            annotation.highlighted = true;\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                movingTextBox: false,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this.handleSelectedCallback = (evt, annotation, handle) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { data } = annotation;\n            annotation.highlighted = true;\n            let movingTextBox = false;\n            let handleIndex;\n            if (handle.worldPosition) {\n                movingTextBox = true;\n            }\n            else {\n                handleIndex = data.handles.points.findIndex((p) => p === handle);\n            }\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex,\n                movingTextBox,\n            };\n            this._activateModify(element);\n            hideElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n            evt.preventDefault();\n        };\n        this._endCallback = (evt) => {\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, newAnnotation, hasMoved } = this.editData;\n            const { data } = annotation;\n            if (newAnnotation && !hasMoved) {\n                return;\n            }\n            data.handles.activeHandleIndex = null;\n            this._deactivateModify(element);\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            this.editData = null;\n            this.isDrawing = false;\n            if (this.isHandleOutsideImage &&\n                this.configuration.preventHandleOutsideImage) {\n                removeAnnotation(annotation.annotationUID);\n            }\n            triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n            if (newAnnotation) {\n                const eventType = Events.ANNOTATION_COMPLETED;\n                const eventDetail = {\n                    annotation,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n            }\n        };\n        this._dragCallback = (evt) => {\n            this.isDrawing = true;\n            const eventDetail = evt.detail;\n            const { element } = eventDetail;\n            const { annotation, viewportIdsToRender, handleIndex, movingTextBox } = this.editData;\n            const { data } = annotation;\n            if (movingTextBox) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { textBox } = data.handles;\n                const { worldPosition } = textBox;\n                worldPosition[0] += worldPosDelta[0];\n                worldPosition[1] += worldPosDelta[1];\n                worldPosition[2] += worldPosDelta[2];\n                textBox.hasMoved = true;\n            }\n            else if (handleIndex === undefined) {\n                const { deltaPoints } = eventDetail;\n                const worldPosDelta = deltaPoints.world;\n                const { points } = data.handles;\n                points.forEach((point) => {\n                    point[0] += worldPosDelta[0];\n                    point[1] += worldPosDelta[1];\n                    point[2] += worldPosDelta[2];\n                });\n                annotation.invalidated = true;\n            }\n            else {\n                const { currentPoints } = eventDetail;\n                const enabledElement = getEnabledElement(element);\n                const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n                const worldPos = currentPoints.world;\n                const { points } = data.handles;\n                points[handleIndex] = [...worldPos];\n                let bottomLeftCanvas;\n                let bottomRightCanvas;\n                let topLeftCanvas;\n                let topRightCanvas;\n                let bottomLeftWorld;\n                let bottomRightWorld;\n                let topLeftWorld;\n                let topRightWorld;\n                switch (handleIndex) {\n                    case 0:\n                    case 3:\n                        bottomLeftCanvas = worldToCanvas(points[0]);\n                        topRightCanvas = worldToCanvas(points[3]);\n                        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n                        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n                        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n                        topLeftWorld = canvasToWorld(topLeftCanvas);\n                        points[1] = bottomRightWorld;\n                        points[2] = topLeftWorld;\n                        break;\n                    case 1:\n                    case 2:\n                        bottomRightCanvas = worldToCanvas(points[1]);\n                        topLeftCanvas = worldToCanvas(points[2]);\n                        bottomLeftCanvas = [\n                            topLeftCanvas[0],\n                            bottomRightCanvas[1],\n                        ];\n                        topRightCanvas = [\n                            bottomRightCanvas[0],\n                            topLeftCanvas[1],\n                        ];\n                        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n                        topRightWorld = canvasToWorld(topRightCanvas);\n                        points[0] = bottomLeftWorld;\n                        points[3] = topRightWorld;\n                        break;\n                }\n                annotation.invalidated = true;\n            }\n            this.editData.hasMoved = true;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n        };\n        this.cancel = (element) => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n                this._deactivateDraw(element);\n                this._deactivateModify(element);\n                resetElementCursor(element);\n                const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n                const { data } = annotation;\n                annotation.highlighted = false;\n                data.handles.activeHandleIndex = null;\n                const enabledElement = getEnabledElement(element);\n                const { renderingEngine } = enabledElement;\n                triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n                if (newAnnotation) {\n                    const eventType = Events.ANNOTATION_COMPLETED;\n                    const eventDetail = {\n                        annotation,\n                    };\n                    triggerEvent(eventTarget, eventType, eventDetail);\n                }\n                this.editData = null;\n                return annotation.annotationUID;\n            }\n        };\n        this._activateDraw = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._activateModify = (element) => {\n            state.isInteractingWithTool = true;\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.addEventListener(Events.TOUCH_END, this._endCallback);\n            element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this._deactivateModify = (element) => {\n            state.isInteractingWithTool = false;\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n            element.removeEventListener(Events.TOUCH_END, this._endCallback);\n            element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n            element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const targetId = this.getTargetId(viewport);\n            const renderingEngine = viewport.getRenderingEngine();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                const { viewPlaneNormal, viewUp } = viewport.getCamera();\n                if (!data.cachedStats[targetId] ||\n                    data.cachedStats[targetId].areaUnit === undefined) {\n                    data.cachedStats[targetId] = {\n                        Modality: null,\n                        area: null,\n                        max: null,\n                        mean: null,\n                        stdDev: null,\n                        areaUnit: null,\n                    };\n                    this._calculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                }\n                else if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement);\n                    if (viewport instanceof VolumeViewport) {\n                        const { referencedImageId } = annotation.metadata;\n                        for (const targetId in data.cachedStats) {\n                            if (targetId.startsWith('imageId')) {\n                                const viewports = renderingEngine.getStackViewports();\n                                const invalidatedStack = viewports.find((vp) => {\n                                    const referencedImageURI = csUtils.imageIdToURI(referencedImageId);\n                                    const hasImageURI = vp.hasImageURI(referencedImageURI);\n                                    const currentImageURI = csUtils.imageIdToURI(vp.getCurrentImageId());\n                                    return hasImageURI && currentImageURI !== referencedImageURI;\n                                });\n                                if (invalidatedStack) {\n                                    delete data.cachedStats[targetId];\n                                }\n                            }\n                        }\n                    }\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotation) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const dataId = `${annotationUID}-rect`;\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                }, dataId);\n                renderStatus = true;\n                const isPreScaled = isViewportPreScaled(viewport, targetId);\n                const isSuvScaled = this.isSuvScaled(viewport, targetId, annotation.metadata.referencedImageId);\n                const textLines = this._getTextLines(data, targetId, isPreScaled, isSuvScaled);\n                if (!textLines || textLines.length === 0) {\n                    continue;\n                }\n                if (!data.handles.textBox.hasMoved) {\n                    const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n                    data.handles.textBox.worldPosition =\n                        viewport.canvasToWorld(canvasTextBoxCoords);\n                }\n                const textBoxPosition = viewport.worldToCanvas(data.handles.textBox.worldPosition);\n                const textBoxUID = '1';\n                const boundingBox = drawLinkedTextBoxSvg(svgDrawingHelper, annotationUID, textBoxUID, textLines, textBoxPosition, canvasCoordinates, {}, this.getLinkedTextBoxStyle(styleSpecifier, annotation));\n                const { x: left, y: top, width, height } = boundingBox;\n                data.handles.textBox.worldBoundingBox = {\n                    topLeft: viewport.canvasToWorld([left, top]),\n                    topRight: viewport.canvasToWorld([left + width, top]),\n                    bottomLeft: viewport.canvasToWorld([left, top + height]),\n                    bottomRight: viewport.canvasToWorld([left + width, top + height]),\n                };\n            }\n            return renderStatus;\n        };\n        this._getRectangleImageCoordinates = (points) => {\n            const [point0, point1] = points;\n            return {\n                left: Math.min(point0[0], point1[0]),\n                top: Math.min(point0[1], point1[1]),\n                width: Math.abs(point0[0] - point1[0]),\n                height: Math.abs(point0[1] - point1[1]),\n            };\n        };\n        this._getTextLines = (data, targetId, isPreScaled, isSuvScaled) => {\n            const cachedVolumeStats = data.cachedStats[targetId];\n            const { area, mean, max, stdDev, Modality, areaUnit } = cachedVolumeStats;\n            if (mean === undefined) {\n                return;\n            }\n            const textLines = [];\n            const unit = getModalityUnit(Modality, isPreScaled, isSuvScaled);\n            textLines.push(`Area: ${area.toFixed(2)} ${areaUnit}\\xb2`);\n            textLines.push(`Mean: ${mean.toFixed(2)} ${unit}`);\n            textLines.push(`Max: ${max.toFixed(2)} ${unit}`);\n            textLines.push(`Std Dev: ${stdDev.toFixed(2)} ${unit}`);\n            return textLines;\n        };\n        this._calculateCachedStats = (annotation, viewPlaneNormal, viewUp, renderingEngine, enabledElement) => {\n            const { data } = annotation;\n            const { viewportId, renderingEngineId } = enabledElement;\n            const worldPos1 = data.handles.points[0];\n            const worldPos2 = data.handles.points[3];\n            const { cachedStats } = data;\n            const targetIds = Object.keys(cachedStats);\n            for (let i = 0; i < targetIds.length; i++) {\n                const targetId = targetIds[i];\n                const image = this.getTargetIdImage(targetId, renderingEngine);\n                if (!image) {\n                    continue;\n                }\n                const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n                const scalarData = 'getScalarData' in image ? image.getScalarData() : image.scalarData;\n                const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n                worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n                worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n                worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n                const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n                worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n                worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n                worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n                if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n                    this.isHandleOutsideImage = false;\n                    const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n                    const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n                    const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n                    const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n                    const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n                    const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n                    const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, worldPos1, worldPos2);\n                    const area = Math.abs(worldWidth * worldHeight);\n                    let count = 0;\n                    let mean = 0;\n                    let stdDev = 0;\n                    let max = -Infinity;\n                    const yMultiple = dimensions[0];\n                    const zMultiple = dimensions[0] * dimensions[1];\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                if (value > max) {\n                                    max = value;\n                                }\n                                count++;\n                                mean += value;\n                            }\n                        }\n                    }\n                    mean /= count;\n                    for (let k = kMin; k <= kMax; k++) {\n                        for (let j = jMin; j <= jMax; j++) {\n                            for (let i = iMin; i <= iMax; i++) {\n                                const value = scalarData[k * zMultiple + j * yMultiple + i];\n                                const valueMinusMean = value - mean;\n                                stdDev += valueMinusMean * valueMinusMean;\n                            }\n                        }\n                    }\n                    stdDev /= count;\n                    stdDev = Math.sqrt(stdDev);\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                        area,\n                        mean,\n                        stdDev,\n                        max,\n                        areaUnit: hasPixelSpacing ? 'mm' : 'px',\n                    };\n                }\n                else {\n                    this.isHandleOutsideImage = true;\n                    cachedStats[targetId] = {\n                        Modality: metadata.Modality,\n                    };\n                }\n            }\n            annotation.invalidated = false;\n            const eventType = Events.ANNOTATION_MODIFIED;\n            const eventDetail = {\n                annotation,\n                viewportId,\n                renderingEngineId,\n            };\n            triggerEvent(eventTarget, eventType, eventDetail);\n            return cachedStats;\n        };\n        this._isInsideVolume = (index1, index2, dimensions) => {\n            return (csUtils.indexWithinDimensions(index1, dimensions) &&\n                csUtils.indexWithinDimensions(index2, dimensions));\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStats, 100, { trailing: true });\n    }\n}\nRectangleROITool.toolName = 'RectangleROI';\nexport default RectangleROITool;\n//# sourceMappingURL=RectangleROITool.js.map","const defaultLabelmapConfig = {\n    renderOutline: true,\n    outlineWidthActive: 3,\n    outlineWidthInactive: 2,\n    renderFill: true,\n    renderFillInactive: true,\n    fillAlpha: 0.7,\n    fillAlphaInactive: 0.65,\n    outlineOpacity: 1,\n    outlineOpacityInactive: 0.85,\n};\nfunction getDefaultLabelmapConfig() {\n    return defaultLabelmapConfig;\n}\nfunction isValidLabelmapConfig(config) {\n    return (config &&\n        typeof config.renderOutline === 'boolean' &&\n        typeof config.outlineWidthActive === 'number' &&\n        typeof config.outlineWidthInactive === 'number' &&\n        typeof config.renderFill === 'boolean' &&\n        typeof config.renderFillInactive === 'boolean' &&\n        typeof config.fillAlpha === 'number' &&\n        typeof config.fillAlphaInactive === 'number' &&\n        typeof config.outlineOpacity === 'number' &&\n        typeof config.outlineOpacityInactive === 'number');\n}\nexport default getDefaultLabelmapConfig;\nexport { isValidLabelmapConfig };\n//# sourceMappingURL=labelmapConfig.js.map","import { fillInsideSphere } from './fillSphere';\nexport function eraseInsideSphere(enabledElement, operationData) {\n    const eraseOperationData = Object.assign({}, operationData, {\n        segmentIndex: 0,\n    });\n    fillInsideSphere(enabledElement, eraseOperationData);\n}\n//# sourceMappingURL=eraseSphere.js.map","import { fillInsideCircle } from './fillCircle';\nexport function eraseInsideCircle(enabledElement, operationData) {\n    const eraseOperationData = {\n        ...operationData,\n        segmentIndex: 0,\n    };\n    fillInsideCircle(enabledElement, eraseOperationData);\n}\n//# sourceMappingURL=eraseCircle.js.map","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport { BaseTool } from '../base';\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport { thresholdInsideCircle, fillInsideCircle, } from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events, ToolModes } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport { resetElementCursor, hideElementCursor, } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { config as segmentationConfig, segmentLocking, segmentIndex as segmentIndexController, state as segmentationState, activeSegmentation, } from '../../stateManagement/segmentation';\nclass BrushTool extends BaseTool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            strategies: {\n                FILL_INSIDE_CIRCLE: fillInsideCircle,\n                THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n                ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n                FILL_INSIDE_SPHERE: fillInsideSphere,\n                ERASE_INSIDE_SPHERE: eraseInsideSphere,\n            },\n            strategySpecificConfiguration: {\n                THRESHOLD_INSIDE_CIRCLE: {\n                    threshold: [-150, -70],\n                },\n            },\n            defaultStrategy: 'FILL_INSIDE_CIRCLE',\n            activeStrategy: 'FILL_INSIDE_CIRCLE',\n            brushSize: 25,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.onSetToolPassive = () => {\n            this.disableCursor();\n        };\n        this.onSetToolEnabled = () => {\n            this.disableCursor();\n        };\n        this.onSetToolDisabled = () => {\n            this.disableCursor();\n        };\n        this.preMouseDownCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Not implemented yet');\n            }\n            const toolGroupId = this.toolGroupId;\n            const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n            if (!activeSegmentationRepresentation) {\n                throw new Error('No active segmentation detected, create one before using the brush tool');\n            }\n            const { segmentationId, type } = activeSegmentationRepresentation;\n            const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n            const { representationData } = segmentationState.getSegmentation(segmentationId);\n            const { volumeId } = representationData[type];\n            const segmentation = cache.getVolume(volumeId);\n            const actors = viewport.getActors();\n            const firstVolumeActorUID = actors[0].uid;\n            const imageVolume = cache.getVolume(firstVolumeActorUID);\n            const viewportIdsToRender = [viewport.id];\n            this._editData = {\n                segmentation,\n                imageVolume,\n                segmentsLocked,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportUIDs(renderingEngine, viewportIdsToRender);\n            return true;\n        };\n        this.mouseMoveCallback = (evt) => {\n            if (this.mode === ToolModes.Active) {\n                this.updateCursor(evt);\n            }\n        };\n        this._dragCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const enabledElement = getEnabledElement(element);\n            const { renderingEngine } = enabledElement;\n            const { imageVolume, segmentation, segmentsLocked } = this._editData;\n            this.updateCursor(evt);\n            const { segmentIndex, segmentationId, segmentationRepresentationUID, brushCursor, viewportIdsToRender, } = this._hoverData;\n            const { data } = brushCursor;\n            const { viewPlaneNormal, viewUp } = brushCursor.metadata;\n            triggerAnnotationRenderForViewportUIDs(renderingEngine, viewportIdsToRender);\n            const operationData = {\n                points: data.handles.points,\n                volume: segmentation,\n                imageVolume,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                toolGroupId: this.toolGroupId,\n                segmentationId,\n                segmentationRepresentationUID,\n                viewUp,\n                strategySpecificConfiguration: this.configuration.strategySpecificConfiguration,\n            };\n            this.applyActiveStrategy(enabledElement, operationData);\n        };\n        this._endCallback = (evt) => {\n            const eventData = evt.detail;\n            const { element } = eventData;\n            const { imageVolume, segmentation, segmentsLocked } = this._editData;\n            const { segmentIndex, segmentationId, segmentationRepresentationUID, brushCursor, } = this._hoverData;\n            const { data } = brushCursor;\n            const { viewPlaneNormal, viewUp } = brushCursor.metadata;\n            this._deactivateDraw(element);\n            resetElementCursor(element);\n            const enabledElement = getEnabledElement(element);\n            const { viewport } = enabledElement;\n            this._editData = null;\n            this.updateCursor(evt);\n            if (viewport instanceof StackViewport) {\n                throw new Error('Not implemented yet');\n            }\n            const operationData = {\n                points: data.handles.points,\n                volume: segmentation,\n                imageVolume,\n                segmentIndex,\n                segmentsLocked,\n                viewPlaneNormal,\n                toolGroupId: this.toolGroupId,\n                segmentationId,\n                segmentationRepresentationUID,\n                viewUp,\n                strategySpecificConfiguration: this.configuration.strategySpecificConfiguration,\n            };\n            this.applyActiveStrategy(enabledElement, operationData);\n        };\n        this._activateDraw = (element) => {\n            element.addEventListener(Events.MOUSE_UP, this._endCallback);\n            element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n        this._deactivateDraw = (element) => {\n            element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n            element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n            element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n        };\n    }\n    disableCursor() {\n        this._hoverData = undefined;\n    }\n    updateCursor(evt) {\n        const eventData = evt.detail;\n        const { element } = eventData;\n        const { currentPoints } = eventData;\n        const centerCanvas = currentPoints.canvas;\n        const enabledElement = getEnabledElement(element);\n        const { renderingEngine, viewport } = enabledElement;\n        const camera = viewport.getCamera();\n        const { viewPlaneNormal, viewUp } = camera;\n        const toolGroupId = this.toolGroupId;\n        const activeSegmentationRepresentation = activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n        if (!activeSegmentationRepresentation) {\n            console.warn('No active segmentation detected, create one before using the brush tool');\n            return;\n        }\n        const { segmentationRepresentationUID, segmentationId } = activeSegmentationRepresentation;\n        const segmentIndex = segmentIndexController.getActiveSegmentIndex(segmentationId);\n        const segmentColor = segmentationConfig.color.getColorForSegmentIndex(toolGroupId, segmentationRepresentationUID, segmentIndex);\n        const viewportIdsToRender = [viewport.id];\n        const brushCursor = {\n            metadata: {\n                viewPlaneNormal: [...viewPlaneNormal],\n                viewUp: [...viewUp],\n                FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n                referencedImageId: '',\n                toolName: this.getToolName(),\n                segmentColor,\n            },\n            data: {},\n        };\n        this._hoverData = {\n            brushCursor,\n            centerCanvas,\n            segmentIndex,\n            segmentationId,\n            segmentationRepresentationUID,\n            segmentColor,\n            viewportIdsToRender,\n        };\n        this._calculateCursor(element, centerCanvas);\n        triggerAnnotationRenderForViewportUIDs(renderingEngine, viewportIdsToRender);\n    }\n    _calculateCursor(element, centerCanvas) {\n        const enabledElement = getEnabledElement(element);\n        const { viewport } = enabledElement;\n        const { canvasToWorld } = viewport;\n        const { brushSize } = this.configuration;\n        const radius = brushSize;\n        const bottomCanvas = [\n            centerCanvas[0],\n            centerCanvas[1] + radius,\n        ];\n        const topCanvas = [centerCanvas[0], centerCanvas[1] - radius];\n        const leftCanvas = [\n            centerCanvas[0] - radius,\n            centerCanvas[1],\n        ];\n        const rightCanvas = [\n            centerCanvas[0] + radius,\n            centerCanvas[1],\n        ];\n        const { brushCursor } = this._hoverData;\n        const { data } = brushCursor;\n        if (data.handles === undefined) {\n            data.handles = {};\n        }\n        data.handles.points = [\n            canvasToWorld(bottomCanvas),\n            canvasToWorld(topCanvas),\n            canvasToWorld(leftCanvas),\n            canvasToWorld(rightCanvas),\n        ];\n        data.invalidated = false;\n    }\n    invalidateBrushCursor() {\n        if (this._hoverData !== undefined) {\n            const { data } = this._hoverData.brushCursor;\n            data.invalidated = true;\n        }\n    }\n    renderAnnotation(enabledElement, svgDrawingHelper) {\n        if (!this._hoverData) {\n            return;\n        }\n        const { viewport } = enabledElement;\n        const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n        if (!viewportIdsToRender.includes(viewport.id)) {\n            return;\n        }\n        const brushCursor = this._hoverData.brushCursor;\n        if (brushCursor.data.invalidated === true) {\n            const { centerCanvas } = this._hoverData;\n            const { element } = viewport;\n            this._calculateCursor(element, centerCanvas);\n        }\n        const toolMetadata = brushCursor.metadata;\n        const annotationUID = toolMetadata.brushCursorUID;\n        const data = brushCursor.data;\n        const { points } = data.handles;\n        const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n        const bottom = canvasCoordinates[0];\n        const top = canvasCoordinates[1];\n        const center = [\n            Math.floor((bottom[0] + top[0]) / 2),\n            Math.floor((bottom[1] + top[1]) / 2),\n        ];\n        const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n        const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n        if (!viewport.getRenderingEngine()) {\n            console.warn('Rendering Engine has been destroyed');\n            return;\n        }\n        const circleUID = '0';\n        drawCircleSvg(svgDrawingHelper, annotationUID, circleUID, center, radius, {\n            color,\n        });\n    }\n}\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n//# sourceMappingURL=BrushTool.js.map","import { getEnabledElement, cache, StackViewport, metaData, triggerEvent, eventTarget, utilities as csUtils, } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport RectangleROITool from '../annotation/RectangleROITool';\nconst { transformWorldToIndex } = csUtils;\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        configuration: {\n            numSlicesToPropagate: 10,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            let referencedImageId, imageVolume, volumeId;\n            if (viewport instanceof StackViewport) {\n                throw new Error('Stack Viewport Not implemented');\n            }\n            else {\n                const targetId = this.getTargetId(viewport);\n                volumeId = targetId.split('volumeId:')[1];\n                imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            if (!referencedImageId) {\n                throw new Error('This tool does not work on non-acquisition planes');\n            }\n            const startIndex = viewport.getCurrentImageIdIndex();\n            const spacingInNormal = csUtils.getSpacingInNormalDirection(imageVolume, viewPlaneNormal);\n            const endIndex = this._getEndSliceIndex(imageVolume, worldPos, spacingInNormal, viewPlaneNormal);\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                    spacingInNormal,\n                },\n                data: {\n                    label: '',\n                    startSlice: startIndex,\n                    endSlice: endIndex,\n                    cachedStats: {\n                        projectionPoints: [],\n                        projectionPointsImageIds: [referencedImageId],\n                    },\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: null,\n                            worldBoundingBox: null,\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    labelmapUID: null,\n                },\n            };\n            this._computeProjectionPoints(annotation, imageVolume);\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n            return annotation;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport } = enabledElement;\n            const annotations = getAnnotations(this.getToolName(), viewport.element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const sliceIndex = viewport.getCurrentImageIdIndex();\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { startSlice, endSlice } = data;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (sliceIndex < Math.min(startSlice, endSlice) ||\n                    sliceIndex > Math.max(startSlice, endSlice)) {\n                    continue;\n                }\n                if (annotation.invalidated) {\n                    this._throttledCalculateCachedStats(annotation, enabledElement);\n                }\n                let firstOrLastSlice = false;\n                if (sliceIndex === startSlice || sliceIndex === endSlice) {\n                    firstOrLastSlice = true;\n                }\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotation) &&\n                    !this.editData &&\n                    activeHandleIndex !== null &&\n                    firstOrLastSlice) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                let lineDashToUse = lineDash;\n                if (!firstOrLastSlice) {\n                    lineDashToUse = 2;\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash: lineDashToUse,\n                    lineWidth,\n                });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n        this._throttledCalculateCachedStats = throttle(this._calculateCachedStatsTool, 100, { trailing: true });\n    }\n    _computeProjectionPoints(annotation, imageVolume) {\n        const { data, metadata } = annotation;\n        const { viewPlaneNormal, spacingInNormal } = metadata;\n        const { imageData } = imageVolume;\n        const { startSlice, endSlice } = data;\n        const { points } = data.handles;\n        const startIJK = transformWorldToIndex(imageData, points[0]);\n        if (startIJK[2] !== startSlice) {\n            throw new Error('Start slice does not match');\n        }\n        const endIJK = vec3.fromValues(startIJK[0], startIJK[1], endSlice);\n        const startWorld = vec3.create();\n        imageData.indexToWorldVec3(startIJK, startWorld);\n        const endWorld = vec3.create();\n        imageData.indexToWorldVec3(endIJK, endWorld);\n        const distance = vec3.distance(startWorld, endWorld);\n        const newProjectionPoints = [];\n        for (let dist = 0; dist < distance; dist += spacingInNormal) {\n            newProjectionPoints.push(points.map((point) => {\n                const newPoint = vec3.create();\n                vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n                return Array.from(newPoint);\n            }));\n        }\n        data.cachedStats.projectionPoints = newProjectionPoints;\n        const projectionPointsImageIds = [];\n        for (const RectanglePoints of newProjectionPoints) {\n            const imageId = csUtils.getClosestImageId(imageVolume, RectanglePoints[0], viewPlaneNormal);\n            projectionPointsImageIds.push(imageId);\n        }\n        data.cachedStats.projectionPointsImageIds = projectionPointsImageIds;\n    }\n    _calculateCachedStatsTool(annotation, enabledElement) {\n        const data = annotation.data;\n        const { viewportId, renderingEngineId, viewport } = enabledElement;\n        const { cachedStats } = data;\n        const volumeId = this.getTargetId(viewport);\n        const imageVolume = cache.getVolume(volumeId.split('volumeId:')[1]);\n        this._computeProjectionPoints(annotation, imageVolume);\n        annotation.invalidated = false;\n        const eventType = Events.ANNOTATION_MODIFIED;\n        const eventDetail = {\n            annotation,\n            viewportId,\n            renderingEngineId,\n        };\n        triggerEvent(eventTarget, eventType, eventDetail);\n        return cachedStats;\n    }\n    _getEndSliceIndex(imageVolume, worldPos, spacingInNormal, viewPlaneNormal) {\n        const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n        const endPos = vec3.create();\n        vec3.scaleAndAdd(endPos, worldPos, viewPlaneNormal, numSlicesToPropagate * spacingInNormal);\n        const halfSpacingInNormalDirection = spacingInNormal / 2;\n        const { imageIds } = imageVolume;\n        let imageIdIndex;\n        for (let i = 0; i < imageIds.length; i++) {\n            const imageId = imageIds[i];\n            const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n            const dir = vec3.create();\n            vec3.sub(dir, endPos, imagePositionPatient);\n            const dot = vec3.dot(dir, viewPlaneNormal);\n            if (Math.abs(dot) < halfSpacingInNormalDirection) {\n                imageIdIndex = i;\n            }\n        }\n        return imageIdIndex;\n    }\n}\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n//# sourceMappingURL=RectangleROIStartEndThresholdTool.js.map","import { getEnabledElement, cache, StackViewport, triggerEvent, eventTarget, utilities as csUtils, } from '@cornerstonejs/core';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { Events } from '../../enums';\nimport { drawHandles as drawHandlesSvg, drawRect as drawRectSvg, } from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport RectangleROITool from '../annotation/RectangleROITool';\nclass RectangleROIThresholdTool extends RectangleROITool {\n    constructor(toolProps = {}, defaultToolProps = {\n        supportedInteractionTypes: ['Mouse', 'Touch'],\n        configuration: {\n            shadow: true,\n            preventHandleOutsideImage: false,\n        },\n    }) {\n        super(toolProps, defaultToolProps);\n        this.addNewAnnotation = (evt) => {\n            const eventDetail = evt.detail;\n            const { currentPoints, element } = eventDetail;\n            const worldPos = currentPoints.world;\n            const enabledElement = getEnabledElement(element);\n            const { viewport, renderingEngine } = enabledElement;\n            this.isDrawing = true;\n            const camera = viewport.getCamera();\n            const { viewPlaneNormal, viewUp } = camera;\n            const targetId = this.getTargetId(viewport);\n            let referencedImageId, volumeId;\n            if (viewport instanceof StackViewport) {\n                referencedImageId = targetId.split('imageId:')[1];\n            }\n            else {\n                volumeId = targetId.split('volumeId:')[1];\n                const imageVolume = cache.getVolume(volumeId);\n                referencedImageId = csUtils.getClosestImageId(imageVolume, worldPos, viewPlaneNormal);\n            }\n            const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n            const annotation = {\n                highlighted: true,\n                invalidated: true,\n                metadata: {\n                    viewPlaneNormal: [...viewPlaneNormal],\n                    enabledElement,\n                    viewUp: [...viewUp],\n                    FrameOfReferenceUID,\n                    referencedImageId,\n                    toolName: this.getToolName(),\n                    volumeId,\n                },\n                data: {\n                    label: '',\n                    handles: {\n                        textBox: {\n                            hasMoved: false,\n                            worldPosition: null,\n                            worldBoundingBox: null,\n                        },\n                        points: [\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                            [...worldPos],\n                        ],\n                        activeHandleIndex: null,\n                    },\n                    segmentationId: null,\n                },\n            };\n            addAnnotation(annotation, element);\n            const viewportIdsToRender = getViewportIdsWithToolToRender(element, this.getToolName());\n            this.editData = {\n                annotation,\n                viewportIdsToRender,\n                handleIndex: 3,\n                newAnnotation: true,\n                hasMoved: false,\n            };\n            this._activateDraw(element);\n            hideElementCursor(element);\n            evt.preventDefault();\n            triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n            return annotation;\n        };\n        this.renderAnnotation = (enabledElement, svgDrawingHelper) => {\n            let renderStatus = false;\n            const { viewport, renderingEngineId } = enabledElement;\n            const { element } = viewport;\n            let annotations = getAnnotations(this.getToolName(), element);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            annotations = this.filterInteractableAnnotationsForElement(element, annotations);\n            if (!annotations?.length) {\n                return renderStatus;\n            }\n            const styleSpecifier = {\n                toolGroupId: this.toolGroupId,\n                toolName: this.getToolName(),\n                viewportId: enabledElement.viewport.id,\n            };\n            for (let i = 0; i < annotations.length; i++) {\n                const annotation = annotations[i];\n                const { annotationUID, data } = annotation;\n                const { points, activeHandleIndex } = data.handles;\n                const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n                styleSpecifier.annotationUID = annotationUID;\n                const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n                const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n                const color = this.getStyle('color', styleSpecifier, annotation);\n                if (!viewport.getRenderingEngine()) {\n                    console.warn('Rendering Engine has been destroyed');\n                    return renderStatus;\n                }\n                const eventType = Events.ANNOTATION_MODIFIED;\n                const eventDetail = {\n                    annotation,\n                    viewportId: viewport.id,\n                    renderingEngineId,\n                };\n                triggerEvent(eventTarget, eventType, eventDetail);\n                let activeHandleCanvasCoords;\n                if (!isAnnotationVisible(annotationUID)) {\n                    continue;\n                }\n                if (!isAnnotationLocked(annotation) &&\n                    !this.editData &&\n                    activeHandleIndex !== null) {\n                    activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n                }\n                if (activeHandleCanvasCoords) {\n                    const handleGroupUID = '0';\n                    drawHandlesSvg(svgDrawingHelper, annotationUID, handleGroupUID, activeHandleCanvasCoords, {\n                        color,\n                    });\n                }\n                const rectangleUID = '0';\n                drawRectSvg(svgDrawingHelper, annotationUID, rectangleUID, canvasCoordinates[0], canvasCoordinates[3], {\n                    color,\n                    lineDash,\n                    lineWidth,\n                });\n                renderStatus = true;\n            }\n            return renderStatus;\n        };\n    }\n}\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n//# sourceMappingURL=RectangleROIThresholdTool.js.map","import { vec3 } from 'gl-matrix';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getCanvasEllipseCorners, pointInEllipse, } from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInShapeCallback } from '../../../utilities';\nconst { transformWorldToIndex } = csUtils;\nfunction fillCircle(enabledElement, operationData, threshold = false) {\n    const { volume: segmentationVolume, imageVolume, points, segmentsLocked, segmentIndex, segmentationId, strategySpecificConfiguration, } = operationData;\n    const { imageData, dimensions } = segmentationVolume;\n    const scalarData = segmentationVolume.getScalarData();\n    const { viewport } = enabledElement;\n    const center = vec3.fromValues(0, 0, 0);\n    points.forEach((point) => {\n        vec3.add(center, center, point);\n    });\n    vec3.scale(center, center, 1 / points.length);\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const [topLeftCanvas, bottomRightCanvas] = getCanvasEllipseCorners(canvasCoordinates);\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const ellipsoidCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        transformWorldToIndex(imageData, bottomRightWorld),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(ellipsoidCornersIJK, dimensions);\n    if (boundsIJK.every(([min, max]) => min !== max)) {\n        throw new Error('Oblique segmentation tools are not supported yet');\n    }\n    const ellipseObj = {\n        center: center,\n        xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n        yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n        zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n    };\n    const modifiedSlicesToUse = new Set();\n    let callback;\n    if (threshold) {\n        callback = ({ value, index, pointIJK }) => {\n            if (segmentsLocked.includes(value)) {\n                return;\n            }\n            if (isWithinThreshold(index, imageVolume, strategySpecificConfiguration)) {\n                scalarData[index] = segmentIndex;\n                modifiedSlicesToUse.add(pointIJK[2]);\n            }\n        };\n    }\n    else {\n        callback = ({ value, index, pointIJK }) => {\n            if (segmentsLocked.includes(value)) {\n                return;\n            }\n            scalarData[index] = segmentIndex;\n            modifiedSlicesToUse.add(pointIJK[2]);\n        };\n    }\n    pointInShapeCallback(imageData, (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS), callback, boundsIJK);\n    const arrayOfSlices = Array.from(modifiedSlicesToUse);\n    triggerSegmentationDataModified(segmentationId, arrayOfSlices);\n}\nfunction isWithinThreshold(index, imageVolume, strategySpecificConfiguration) {\n    const { THRESHOLD_INSIDE_CIRCLE } = strategySpecificConfiguration;\n    const voxelValue = imageVolume.getScalarData()[index];\n    const { threshold } = THRESHOLD_INSIDE_CIRCLE;\n    return threshold[0] <= voxelValue && voxelValue <= threshold[1];\n}\nexport function fillInsideCircle(enabledElement, operationData) {\n    fillCircle(enabledElement, operationData, false);\n}\nexport function thresholdInsideCircle(enabledElement, operationData) {\n    const { volume, imageVolume } = operationData;\n    if (!csUtils.isEqual(volume.dimensions, imageVolume.dimensions) ||\n        !csUtils.isEqual(volume.direction, imageVolume.direction)) {\n        throw new Error('Only source data the same dimensions/size/orientation as the segmentation currently supported.');\n    }\n    fillCircle(enabledElement, operationData, true);\n}\nexport function fillOutsideCircle(enabledElement, operationData) {\n    throw new Error('Not yet implemented');\n}\n//# sourceMappingURL=fillCircle.js.map","import { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInSurroundingSphereCallback } from '../../../utilities';\nfunction fillSphere(enabledElement, operationData, _inside = true) {\n    const { viewport } = enabledElement;\n    const { volume: segmentation, segmentsLocked, segmentIndex, segmentationId, points, } = operationData;\n    const { imageData, dimensions } = segmentation;\n    const scalarData = segmentation.getScalarData();\n    const scalarIndex = [];\n    const callback = ({ index, value }) => {\n        if (segmentsLocked.includes(value)) {\n            return;\n        }\n        scalarData[index] = segmentIndex;\n        scalarIndex.push(index);\n    };\n    pointInSurroundingSphereCallback(imageData, [points[0], points[1]], callback, viewport);\n    const zMultiple = dimensions[0] * dimensions[1];\n    const minSlice = Math.floor(scalarIndex[0] / zMultiple);\n    const maxSlice = Math.floor(scalarIndex[scalarIndex.length - 1] / zMultiple);\n    const sliceArray = Array.from({ length: maxSlice - minSlice + 1 }, (v, k) => k + minSlice);\n    triggerSegmentationDataModified(segmentationId, sliceArray);\n}\nexport function fillInsideSphere(enabledElement, operationData) {\n    fillSphere(enabledElement, operationData, true);\n}\nexport function fillOutsideSphere(enabledElement, operationData) {\n    fillSphere(enabledElement, operationData, false);\n}\n//# sourceMappingURL=fillSphere.js.map","function extend2DBoundingBoxInViewAxis(boundsIJK, numSlicesToProject) {\n    const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n    if (sliceNormalIndex === -1) {\n        throw new Error('3D bounding boxes not supported in an oblique plane');\n    }\n    boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n    boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n    return boundsIJK;\n}\nexport default extend2DBoundingBoxInViewAxis;\n//# sourceMappingURL=extend2DBoundingBoxInViewAxis.js.map","function getBoundingBoxAroundShape(points, dimensions) {\n    let xMin = Infinity;\n    let xMax = 0;\n    let yMin = Infinity;\n    let yMax = 0;\n    let zMin = Infinity;\n    let zMax = 0;\n    points.forEach((p) => {\n        xMin = Math.min(p[0], xMin);\n        xMax = Math.max(p[0], xMax);\n        yMin = Math.min(p[1], yMin);\n        yMax = Math.max(p[1], yMax);\n        zMin = Math.min(p[2], zMin);\n        zMax = Math.max(p[2], zMax);\n    });\n    xMin = Math.floor(xMin);\n    xMax = Math.floor(xMax);\n    yMin = Math.floor(yMin);\n    yMax = Math.floor(yMax);\n    zMin = Math.floor(zMin);\n    zMax = Math.floor(zMax);\n    if (dimensions) {\n        const [width, height, depth] = dimensions;\n        xMin = Math.max(0, xMin);\n        xMax = Math.min(width - 1, xMax);\n        yMin = Math.max(0, yMin);\n        yMax = Math.min(height - 1, yMax);\n        zMin = Math.max(0, zMin);\n        zMax = Math.min(depth - 1, zMax);\n    }\n    return [\n        [xMin, xMax],\n        [yMin, yMax],\n        [zMin, zMax],\n    ];\n}\nexport default getBoundingBoxAroundShape;\n//# sourceMappingURL=getBoundingBoxAroundShape.js.map","import * as lineSegment from '../line';\nfunction rectToLineSegments(left, top, width, height) {\n    const topLineStart = [left, top];\n    const topLineEnd = [left + width, top];\n    const rightLineStart = [left + width, top];\n    const rightLineEnd = [left + width, top + height];\n    const bottomLineStart = [left + width, top + height];\n    const bottomLineEnd = [left, top + height];\n    const leftLineStart = [left, top + height];\n    const leftLineEnd = [left, top];\n    const lineSegments = {\n        top: [topLineStart, topLineEnd],\n        right: [rightLineStart, rightLineEnd],\n        bottom: [bottomLineStart, bottomLineEnd],\n        left: [leftLineStart, leftLineEnd],\n    };\n    return lineSegments;\n}\nexport default function distanceToPoint(rect, point) {\n    if (rect.length !== 4 || point.length !== 2) {\n        throw Error('rectangle:[left, top, width, height] or point: [x,y] not defined correctly');\n    }\n    const [left, top, width, height] = rect;\n    let minDistance = 655535;\n    const lineSegments = rectToLineSegments(left, top, width, height);\n    Object.keys(lineSegments).forEach((segment) => {\n        const [lineStart, lineEnd] = lineSegments[segment];\n        const distance = lineSegment.distanceToPoint(lineStart, lineEnd, point);\n        if (distance < minDistance) {\n            minDistance = distance;\n        }\n    });\n    return minDistance;\n}\n//# sourceMappingURL=distanceToPoint.js.map","import { vec3 } from 'gl-matrix';\nexport default function getWorldWidthAndHeightFromCorners(viewPlaneNormal, viewUp, topLeftWorld, bottomRightWorld) {\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const pos1 = vec3.fromValues(...topLeftWorld);\n    const pos2 = vec3.fromValues(...bottomRightWorld);\n    const diagonal = vec3.create();\n    vec3.subtract(diagonal, pos1, pos2);\n    const diagonalLength = vec3.length(diagonal);\n    if (diagonalLength < 0.0001) {\n        return { worldWidth: 0, worldHeight: 0 };\n    }\n    const cosTheta = vec3.dot(diagonal, viewRight) / (diagonalLength * vec3.length(viewRight));\n    const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n    const worldWidth = sinTheta * diagonalLength;\n    const worldHeight = cosTheta * diagonalLength;\n    return { worldWidth, worldHeight };\n}\n//# sourceMappingURL=getWorldWidthAndHeightFromCorners.js.map","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport pointInShapeCallback from './pointInShapeCallback';\nimport { getBoundingBoxAroundShape } from './boundingBox';\nconst { transformWorldToIndex } = csUtils;\nexport default function pointInSurroundingSphereCallback(imageData, circlePoints, callback, viewport) {\n    const { boundsIJK, centerWorld, radiusWorld } = _getBounds(circlePoints, imageData, viewport);\n    const sphereObj = {\n        center: centerWorld,\n        radius: radiusWorld,\n    };\n    pointInShapeCallback(imageData, (pointLPS) => pointInSphere(sphereObj, pointLPS), callback, boundsIJK);\n}\nfunction _getBounds(circlePoints, imageData, viewport) {\n    const [bottom, top] = circlePoints;\n    const centerWorld = vec3.fromValues((bottom[0] + top[0]) / 2, (bottom[1] + top[1]) / 2, (bottom[2] + top[2]) / 2);\n    const radiusWorld = vec3.distance(bottom, top) / 2;\n    let boundsIJK;\n    if (!viewport) {\n        const centerIJK = transformWorldToIndex(imageData, centerWorld);\n        const spacings = imageData.getSpacing();\n        const minSpacing = Math.min(...spacings);\n        const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n        boundsIJK = [\n            [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n            [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n            [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n        ];\n        return {\n            boundsIJK,\n            centerWorld: centerWorld,\n            radiusWorld,\n        };\n    }\n    boundsIJK = _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld);\n    return {\n        boundsIJK,\n        centerWorld: centerWorld,\n        radiusWorld,\n    };\n}\nfunction _computeBoundsIJKWithCamera(imageData, viewport, circlePoints, centerWorld, radiusWorld) {\n    const [bottom, top] = circlePoints;\n    const dimensions = imageData.getDimensions();\n    const camera = viewport.getCamera();\n    const viewUp = vec3.fromValues(camera.viewUp[0], camera.viewUp[1], camera.viewUp[2]);\n    const viewPlaneNormal = vec3.fromValues(camera.viewPlaneNormal[0], camera.viewPlaneNormal[1], camera.viewPlaneNormal[2]);\n    const viewRight = vec3.create();\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n    const topLeftWorld = vec3.create();\n    const bottomRightWorld = vec3.create();\n    vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n    vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n    vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n    const sphereCornersIJK = [\n        transformWorldToIndex(imageData, topLeftWorld),\n        (transformWorldToIndex(imageData, bottomRightWorld)),\n    ];\n    const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n    return boundsIJK;\n}\n//# sourceMappingURL=pointInSurroundingSphereCallback.js.map","export default function pointInSphere(sphere, pointLPS) {\n    const { center, radius } = sphere;\n    return ((pointLPS[0] - center[0]) ** 2 +\n        (pointLPS[1] - center[1]) ** 2 +\n        (pointLPS[2] - center[2]) ** 2 <=\n        radius ** 2);\n}\n//# sourceMappingURL=pointInSphere.js.map","import { utilities as csUtils } from '@cornerstonejs/core';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\nimport extend2DBoundingBoxInViewAxis from '../boundingBox/extend2DBoundingBoxInViewAxis';\nfunction getBoundsIJKFromRectangleAnnotations(annotations, referenceVolume, options = {}) {\n    const AllBoundsIJK = [];\n    annotations.forEach((annotation) => {\n        const { data } = annotation;\n        const { points } = data.handles;\n        const { imageData, dimensions } = referenceVolume;\n        let pointsToUse = points;\n        if (data.cachedStats?.projectionPoints) {\n            const { projectionPoints } = data.cachedStats;\n            pointsToUse = [].concat(...projectionPoints);\n        }\n        const rectangleCornersIJK = pointsToUse.map((world) => csUtils.transformWorldToIndex(imageData, world));\n        let boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n        if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {\n            boundsIJK = extend2DBoundingBoxInViewAxis(boundsIJK, options.numSlicesToProject);\n        }\n        AllBoundsIJK.push(boundsIJK);\n    });\n    if (AllBoundsIJK.length === 1) {\n        return AllBoundsIJK[0];\n    }\n    const boundsIJK = AllBoundsIJK.reduce((accumulator, currentValue) => {\n        return {\n            iMin: Math.min(accumulator.iMin, currentValue.iMin),\n            jMin: Math.min(accumulator.jMin, currentValue.jMin),\n            kMin: Math.min(accumulator.kMin, currentValue.kMin),\n            iMax: Math.max(accumulator.iMax, currentValue.iMax),\n            jMax: Math.max(accumulator.jMax, currentValue.jMax),\n            kMax: Math.max(accumulator.kMax, currentValue.kMax),\n        };\n    }, {\n        iMin: Infinity,\n        jMin: Infinity,\n        kMin: Infinity,\n        iMax: -Infinity,\n        jMax: -Infinity,\n        kMax: -Infinity,\n    });\n    return boundsIJK;\n}\nexport default getBoundsIJKFromRectangleAnnotations;\n//# sourceMappingURL=getBoundsIJKFromRectangleAnnotations.js.map","import { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\nfunction createMergedLabelmapForIndex(labelmaps, segmentIndex = 1, volumeId = 'mergedLabelmap') {\n    labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {\n        if (!csUtils.isEqual(dimensions, labelmaps[0].dimensions) ||\n            !csUtils.isEqual(direction, labelmaps[0].direction) ||\n            !csUtils.isEqual(spacing, labelmaps[0].spacing) ||\n            !csUtils.isEqual(origin, labelmaps[0].origin)) {\n            throw new Error('labelmaps must have the same size and shape');\n        }\n    });\n    const labelmap = labelmaps[0];\n    const arrayType = labelmap.getScalarData().constructor;\n    const outputData = new arrayType(labelmap.getScalarData().length);\n    labelmaps.forEach((labelmap) => {\n        const scalarData = labelmap.getScalarData();\n        for (let i = 0; i < scalarData.length; i++) {\n            if (scalarData[i] === segmentIndex) {\n                outputData[i] = segmentIndex;\n            }\n        }\n    });\n    const options = {\n        scalarData: outputData,\n        metadata: labelmap.metadata,\n        spacing: labelmap.spacing,\n        origin: labelmap.origin,\n        direction: labelmap.direction,\n        dimensions: labelmap.dimensions,\n    };\n    const preventCache = true;\n    const mergedVolume = volumeLoader.createLocalVolume(options, volumeId, preventCache);\n    return mergedVolume;\n}\nexport default createMergedLabelmapForIndex;\n//# sourceMappingURL=createMergedLabelmapForIndex.js.map","import { state } from '../../stateManagement/annotation';\nimport { RectangleROIStartEndThresholdTool, RectangleROIThresholdTool, } from '../../tools';\nimport thresholdVolumeByRange from './thresholdVolumeByRange';\nimport getBoundsIJKFromRectangleAnnotations from '../rectangleROITool/getBoundsIJKFromRectangleAnnotations';\nfunction rectangleROIThresholdVolumeByRange(annotationUIDs, segmentationVolume, thresholdVolumeInformation, options) {\n    const annotations = annotationUIDs.map((annotationUID) => {\n        return state.getAnnotation(annotationUID);\n    });\n    _validateAnnotations(annotations);\n    let boundsIJK;\n    for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n        const volumeSize = thresholdVolumeInformation[i].volume.getScalarData().length;\n        if (volumeSize === segmentationVolume.getScalarData().length || i === 0) {\n            boundsIJK = getBoundsIJKFromRectangleAnnotations(annotations, thresholdVolumeInformation[i].volume, options);\n        }\n    }\n    const outputSegmentationVolume = thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, { ...options, boundsIJK });\n    return outputSegmentationVolume;\n}\nfunction _validateAnnotations(annotations) {\n    const validToolNames = [\n        RectangleROIThresholdTool.toolName,\n        RectangleROIStartEndThresholdTool.toolName,\n    ];\n    for (const annotation of annotations) {\n        const name = annotation.metadata.toolName;\n        if (!validToolNames.includes(name)) {\n            throw new Error('rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations');\n        }\n    }\n}\nexport default rectangleROIThresholdVolumeByRange;\n//# sourceMappingURL=rectangleROIThresholdVolumeByRange.js.map","import { pointInShapeCallback } from '../../utilities';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { getVoxelOverlap, processVolumes, } from './utilities';\nfunction thresholdVolumeByRange(segmentationVolume, thresholdVolumeInformation, options) {\n    const { imageData: segmentationImageData } = segmentationVolume;\n    const scalarData = segmentationVolume.getScalarData();\n    const { overwrite, boundsIJK } = options;\n    const overlapType = options?.overlapType || 0;\n    if (overwrite) {\n        for (let i = 0; i < scalarData.length; i++) {\n            scalarData[i] = 0;\n        }\n    }\n    const { baseVolumeIdx, volumeInfoList } = processVolumes(segmentationVolume, thresholdVolumeInformation);\n    let overlaps, total, range;\n    const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {\n        const callbackOverlap = ({ value }) => {\n            total = total + 1;\n            if (value >= range.lower && value <= range.upper) {\n                overlaps = overlaps + 1;\n            }\n        };\n        const { imageData, dimensions, lower, upper } = volumeInfo;\n        const overlapBounds = getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter);\n        total = 0;\n        overlaps = 0;\n        range = { lower, upper };\n        let overlapTest = false;\n        pointInShapeCallback(imageData, () => true, callbackOverlap, overlapBounds);\n        if (overlapType === 0) {\n            overlapTest = overlaps > 0;\n        }\n        else if (overlapType == 1) {\n            overlapTest = overlaps === total;\n        }\n        return overlapTest;\n    };\n    const testRange = (volumeInfo, pointIJK) => {\n        const { imageData, referenceValues, lower, upper } = volumeInfo;\n        const offset = imageData.computeOffsetIndex(pointIJK);\n        const value = referenceValues[offset];\n        if (value <= lower || value >= upper) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    const callback = ({ index, pointIJK, pointLPS }) => {\n        let insert = volumeInfoList.length > 0;\n        for (let i = 0; i < volumeInfoList.length; i++) {\n            if (volumeInfoList[i].volumeSize === scalarData.length) {\n                insert = testRange(volumeInfoList[i], pointIJK);\n            }\n            else {\n                insert = testOverlapRange(volumeInfoList[i], volumeInfoList[baseVolumeIdx].spacing, pointLPS);\n            }\n            if (!insert) {\n                break;\n            }\n        }\n        if (insert)\n            scalarData[index] = 1;\n    };\n    pointInShapeCallback(segmentationImageData, () => true, callback, boundsIJK);\n    triggerSegmentationDataModified(segmentationVolume.volumeId);\n    return segmentationVolume;\n}\nexport default thresholdVolumeByRange;\n//# sourceMappingURL=thresholdVolumeByRange.js.map","import { utilities as csUtils } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\nexport default function getBrushToolInstances(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n    if (toolGroup === undefined) {\n        return;\n    }\n    const toolInstances = toolGroup._toolInstances;\n    if (!Object.keys(toolInstances).length) {\n        return;\n    }\n    const brushBasedToolInstances = Object.values(toolInstances).filter((toolInstance) => toolInstance instanceof BrushTool);\n    return brushBasedToolInstances;\n}\nconst equalsCheck = (a, b) => {\n    return JSON.stringify(a) === JSON.stringify(b);\n};\nexport function getVoxelOverlap(imageData, dimensions, voxelSpacing, voxelCenter) {\n    const voxelCornersWorld = [];\n    for (let i = 0; i < 2; i++) {\n        for (let j = 0; j < 2; j++) {\n            for (let k = 0; k < 2; k++) {\n                const point = voxelCenter;\n                point[0] = point[0] + ((i * 2 - 1) * voxelSpacing[0]) / 2;\n                point[1] = point[1] + ((j * 2 - 1) * voxelSpacing[1]) / 2;\n                point[2] = point[2] + ((k * 2 - 1) * voxelSpacing[2]) / 2;\n                voxelCornersWorld.push(point);\n            }\n        }\n    }\n    const voxelCornersIJK = voxelCornersWorld.map((world) => csUtils.transformWorldToIndex(imageData, world));\n    const overlapBounds = getBoundingBoxAroundShape(voxelCornersIJK, dimensions);\n    return overlapBounds;\n}\nexport function processVolumes(segmentationVolume, thresholdVolumeInformation) {\n    const { spacing: segmentationSpacing, imageData: segmentationImageData } = segmentationVolume;\n    const scalarData = segmentationVolume.getScalarData();\n    const volumeInfoList = [];\n    let baseVolumeIdx = 0;\n    for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n        const { imageData, spacing, dimensions } = thresholdVolumeInformation[i].volume;\n        const volumeSize = thresholdVolumeInformation[i].volume.getScalarData().length;\n        if (volumeSize === scalarData.length &&\n            equalsCheck(spacing, segmentationSpacing)) {\n            baseVolumeIdx = i;\n        }\n        const referenceValues = imageData.getPointData().getScalars().getData();\n        const lower = thresholdVolumeInformation[i].lower;\n        const upper = thresholdVolumeInformation[i].upper;\n        volumeInfoList.push({\n            imageData,\n            referenceValues,\n            lower,\n            upper,\n            spacing,\n            dimensions,\n            volumeSize,\n        });\n    }\n    return {\n        volumeInfoList,\n        baseVolumeIdx,\n    };\n}\n//# sourceMappingURL=utilities.js.map"],"names":["drawRect","svgDrawingHelper","annotationUID","rectangleUID","start","end","options","dataId","color","width","_width","lineWidth","lineDash","Object","assign","undefined","strokeWidth","svgNodeHash","existingRect","getSvgNode","tlhc","Math","min","abs","height","attributes","x","y","stroke","fill","setNodeTouched","svgRectElement","document","createElementNS","setAttribute","appendNode","SegmentationRepresentations","getActiveSegmentationRepresentation","toolGroupId","toolGroupSegmentationRepresentations","getDefaultSegmentationStateManager","getSegmentationRepresentations","find","representation","active","setActiveSegmentationRepresentation","segmentationRepresentationUID","triggerSegmentationRepresentationModified","addColorLUT","colorLUT","colorLUTIndex","Error","console","warn","unshift","setColorLUT","segRepresentation","getColorForSegmentIndex","segmentIndex","segmentationRepresentation","setColorForSegmentIndex","colorReference","i","length","setActiveSegmentIndex","segmentationId","segmentation","getSegmentation","activeSegmentIndex","triggerSegmentationModified","getActiveSegmentIndex","isSegmentIndexLocked","segmentsLocked","has","setSegmentIndexLocked","locked","add","delete","getLockedSegments","Array","from","defaultContourConfig","renderOutline","outlineWidthActive","outlineWidthInactive","outlineOpacity","outlineOpacityInactive","renderFill","fillAlpha","fillAlphaInactive","defaultLabelmapConfig","initialDefaultState","segmentations","globalConfig","renderInactiveSegmentations","representations","toolGroups","defaultSegmentationStateManager","constructor","uid","this","state","getState","getToolGroups","keys","getColorLUT","lutIndex","resetState","addSegmentation","_initDefaultColorLUTIfNecessary","push","toolGroupSegRepresentationsWithConfig","segmentationRepresentations","addSegmentationRepresentation","config","_handleActiveSegmentation","getGlobalConfig","setGlobalConfig","getSegmentationRepresentationByUID","removeSegmentation","filter","removeSegmentationRepresentation","index","findIndex","segData","removedSegmentationRepresentation","splice","toolGroupSegmentations","segmentationData","getToolGroupSpecificConfig","toolGroupStateWithConfig","getSegmentationRepresentationSpecificConfig","segmentationRepresentationSpecificConfig","setSegmentationRepresentationSpecificConfig","getSegmentSpecificConfig","segmentSpecificConfig","setSegmentSpecificConfig","setSegmentationRepresentationConfig","log","removeColorLUT","recentlyAddedOrRemovedSegmentationRepresentation","forEach","segmentationInput","cachedStats","segmentLabels","label","Set","type","representationData","data","getSegmentations","suppressEvents","segmentationStateManager","getToolGroupIdsWithSegmentation","toolGroupIds","foundToolGroupIds","setToolGroupSpecificConfig","getSegmentSpecificRepresentationConfig","setSegmentSpecificRepresentationConfig","triggerSegmentationRemoved","triggerSegmentationRepresentationRemoved","eventDetail","segmentationIds","map","triggerSegmentationDataModified","modifiedSlicesToUse","s","id","transformWorldToIndex","RectangleROITool","toolProps","defaultToolProps","supportedInteractionTypes","configuration","shadow","preventHandleOutsideImage","super","addNewAnnotation","evt","detail","currentPoints","element","worldPos","world","enabledElement","viewport","renderingEngine","isDrawing","camera","getCamera","viewPlaneNormal","viewUp","referencedImageId","getReferencedImageId","FrameOfReferenceUID","getFrameOfReferenceUID","annotation","invalidated","highlighted","metadata","toolName","getToolName","handles","points","textBox","hasMoved","worldPosition","worldBoundingBox","topLeft","topRight","bottomLeft","bottomRight","activeHandleIndex","addAnnotation","viewportIdsToRender","editData","handleIndex","movingTextBox","newAnnotation","_activateDraw","hideElementCursor","preventDefault","isPointNearTool","canvasCoords","proximity","canvasPoint1","worldToCanvas","canvasPoint2","rect","_getRectangleImageCoordinates","point","left","top","toolSelectedCallback","_activateModify","handleSelectedCallback","handle","p","_endCallback","_deactivateModify","_deactivateDraw","resetElementCursor","isHandleOutsideImage","removeAnnotation","eventType","_dragCallback","deltaPoints","worldPosDelta","canvasToWorld","bottomLeftCanvas","bottomRightCanvas","topLeftCanvas","topRightCanvas","bottomLeftWorld","bottomRightWorld","topLeftWorld","topRightWorld","cancel","addEventListener","removeEventListener","renderAnnotation","renderStatus","annotations","getAnnotations","filterInteractableAnnotationsForElement","targetId","getTargetId","getRenderingEngine","styleSpecifier","viewportId","canvasCoordinates","getStyle","areaUnit","_throttledCalculateCachedStats","startsWith","getStackViewports","vp","referencedImageURI","hasImageURI","currentImageURI","getCurrentImageId","Modality","area","max","mean","stdDev","_calculateCachedStats","activeHandleCanvasCoords","isAnnotationVisible","isAnnotationLocked","handleGroupUID","isPreScaled","isSuvScaled","textLines","_getTextLines","canvasTextBoxCoords","textBoxPosition","textBoxUID","boundingBox","getLinkedTextBoxStyle","point0","point1","cachedVolumeStats","unit","toFixed","renderingEngineId","worldPos1","worldPos2","targetIds","image","getTargetIdImage","dimensions","imageData","hasPixelSpacing","scalarData","getScalarData","worldPos1Index","floor","worldPos2Index","_isInsideVolume","iMin","iMax","jMin","jMax","kMin","kMax","worldWidth","worldHeight","count","Infinity","yMultiple","zMultiple","k","j","value","valueMinusMean","sqrt","index1","index2","trailing","renderFillInactive","isValidLabelmapConfig","eraseInsideSphere","operationData","eraseOperationData","eraseInsideCircle","BrushTool","BaseTool","strategies","FILL_INSIDE_CIRCLE","THRESHOLD_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","strategySpecificConfiguration","threshold","defaultStrategy","activeStrategy","brushSize","onSetToolPassive","disableCursor","onSetToolEnabled","onSetToolDisabled","preMouseDownCallback","eventData","getEnabledElement","StackViewport","activeSegmentationRepresentation","activeSegmentation","segmentLocking","segmentationState","volumeId","cache","firstVolumeActorUID","getActors","imageVolume","_editData","mouseMoveCallback","mode","ToolModes","updateCursor","brushCursor","_hoverData","volume","applyActiveStrategy","Events","centerCanvas","canvas","segmentColor","_calculateCursor","radius","bottomCanvas","topCanvas","leftCanvas","rightCanvas","invalidateBrushCursor","includes","toolMetadata","brushCursorUID","bottom","center","slice","drawCircle","RectangleROIStartEndThresholdTool","numSlicesToPropagate","split","startIndex","getCurrentImageIdIndex","spacingInNormal","endIndex","_getEndSliceIndex","startSlice","endSlice","projectionPoints","projectionPointsImageIds","labelmapUID","_computeProjectionPoints","sliceIndex","firstOrLastSlice","lineDashToUse","_calculateCachedStatsTool","startIJK","endIJK","startWorld","indexToWorldVec3","endWorld","distance","newProjectionPoints","dist","newPoint","RectanglePoints","imageId","endPos","halfSpacingInNormalDirection","imageIds","imageIdIndex","imagePositionPatient","dir","dot","RectangleROIThresholdTool","fillCircle","segmentationVolume","ellipsoidCornersIJK","boundsIJK","every","ellipseObj","xRadius","yRadius","zRadius","callback","pointIJK","voxelValue","isWithinThreshold","pointLPS","arrayOfSlices","fillInsideCircle","thresholdInsideCircle","direction","fillSphere","_inside","scalarIndex","minSlice","maxSlice","sliceArray","v","fillInsideSphere","numSlicesToProject","sliceNormalIndex","xMin","xMax","yMin","yMax","zMin","zMax","depth","distanceToPoint","minDistance","lineSegments","right","rectToLineSegments","segment","lineStart","lineEnd","getWorldWidthAndHeightFromCorners","viewRight","pos1","pos2","diagonal","diagonalLength","cosTheta","pointInSurroundingSphereCallback","circlePoints","centerWorld","radiusWorld","vec3","fromValues","centerIJK","spacings","getSpacing","minSpacing","maxRadiusIJK","ceil","getDimensions","create","cross","scaleAndAdd","sphereCornersIJK","getBoundingBoxAroundShape","_computeBoundsIJKWithCamera","_getBounds","sphereObj","pointInShapeCallback","sphere","pointInSphere","referenceVolume","AllBoundsIJK","pointsToUse","concat","rectangleCornersIJK","reduce","accumulator","currentValue","labelmaps","origin","spacing","labelmap","outputData","arrayType","annotationUIDs","thresholdVolumeInformation","validToolNames","name","_validateAnnotations","segmentationImageData","overwrite","overlapType","baseVolumeIdx","volumeInfoList","overlaps","total","range","testOverlapRange","volumeInfo","voxelSpacing","voxelCenter","lower","upper","overlapBounds","overlapTest","testRange","referenceValues","computeOffsetIndex","insert","volumeSize","getBrushToolInstances","toolGroup","toolInstances","_toolInstances","values","toolInstance","equalsCheck","a","b","JSON","stringify","getVoxelOverlap","voxelCornersWorld","voxelCornersIJK","processVolumes","segmentationSpacing","getPointData","getScalars","getData"],"sourceRoot":""}